export async function generatePDF(data: any): Promise<Buffer> {
  try {
    // Dynamic import to handle potential server-side issues
    const { jsPDF } = await import('jspdf');
    
    // Create PDF document
    const pdf = new jsPDF({ orientation: "p", unit: "pt", format: "a4" });
    
    // Add title
    pdf.setFontSize(20);
    pdf.text('Pulse Dashboard™ Report', 50, 50);
    
    // Add client info
    pdf.setFontSize(12);
    let yPosition = 80;
    
    if (data.clientLabel) {
      pdf.text(`Client: ${data.clientLabel}`, 50, yPosition);
      yPosition += 20;
    }
    
    // Add generation date
    const today = new Date();
    pdf.text(`Generated: ${today.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long', 
      day: 'numeric'
    })}`, 50, yPosition);
    yPosition += 30;
    
    // Add content sections
    pdf.setFontSize(11);
    pdf.text('Dashboard Summary:', 50, yPosition);
    yPosition += 20;
    
    pdf.setFontSize(10);
    const summaryText = [
      '• Analytics data and insights from July 2025',
      '• Competitive benchmarking analysis',
      '• AI-generated recommendations',
      '• Performance metrics visualization'
    ];
    
    summaryText.forEach(line => {
      pdf.text(line, 60, yPosition);
      yPosition += 15;
    });
    
    yPosition += 20;
    pdf.text('Note: This is a simplified PDF export. Full charts and interactive', 50, yPosition);
    pdf.text('visualizations are available in the web dashboard.', 50, yPosition + 15);
    
    // Add footer
    pdf.setFontSize(8);
    pdf.text('Generated by Pulse Dashboard™ - Clear Digital', 50, pdf.internal.pageSize.getHeight() - 30);
    
    // Return as Buffer
    const pdfArrayBuffer = pdf.output('arraybuffer');
    return Buffer.from(pdfArrayBuffer);
    
  } catch (error) {
    console.error('PDF generation error:', error);
    throw new Error(`PDF generation failed: ${(error as Error).message}`);
  }
}