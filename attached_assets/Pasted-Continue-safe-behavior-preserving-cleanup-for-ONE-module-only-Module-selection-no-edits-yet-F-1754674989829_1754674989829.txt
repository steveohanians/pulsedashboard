Continue safe, behavior-preserving cleanup for ONE module only.

Module selection (no edits yet)
- From the remaining set, propose 3 candidate modules (paths) and pick ONE lowest-risk choice.
- Justify choice using: active imports, duplication potential, low coupling.
- List files you intend to touch. STOP until I confirm (or auto-continue if I say “proceed”).

Hard limits (anti-bloat)
- Change budget: ≤10% net line growth OR negative lines. Justify any exception.
- No new abstractions unless they REMOVE duplication (net negative lines).
- Reuse existing helpers. Do NOT add parallel/duplicate utilities.
- NO banner comments; keep docs minimal (contracts/edge cases only).
- Add 0 logs; only keep existing structured error logs.

Process (for the chosen module)
1) Plan 3–5 tiny, mechanical, behavior-preserving steps (rename/extract/move/consolidate).
2) Execute Step 1 ONLY:
   - Show a SMALL unified diff (changed lines only).
   - 1–2 sentence rationale per hunk.
   - Run verification (see below) and report results.
3) If green, proceed to Step 2, etc., until the module budget is used or the plan finishes.
4) STOP after this module and wait for my next run.

Verification (each step)
- Type check: tsc -noEmit
- Lint: eslint .
- Tests: npm test -s (or the project test command)
- Unused exports: ts-prune (report for changed files)
- Import graph: madge/depcruise for the touched module (check for new cycles)

Output per step
- Summary (one sentence)
- Diff (only changed lines)
- Rationale (1–2 sentences)
- Verification results (pass/fail, brief)
- Next step (one sentence)

Stop conditions
- Any failing check
- Any API/import break or public contract change
- Exceeding change budget without explicit justification
- Any uncertainty about behavior equivalence—ASK instead of guessing

Module-specific notes
- If UI (client/src/components/**): preserve props shape; no visual changes; keep a11y (focus/aria) intact. If snapshots exist, update only when behaviorally justified.
- If server/services/** or server/routes/**: preserve request/response contracts; don’t alter auth, rate limits, or error taxonomy.
- If shared/**: avoid introducing client↔server coupling; keep browser-safe code in client paths.

Continuation
- If time/context runs out, PAUSE at a safe checkpoint. I will paste this prompt again to resume the next step or module.