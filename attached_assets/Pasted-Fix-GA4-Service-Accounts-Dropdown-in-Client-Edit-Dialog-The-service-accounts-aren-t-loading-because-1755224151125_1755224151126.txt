Fix GA4 Service Accounts Dropdown in Client Edit Dialog

The service accounts aren't loading because the query needs to be added and the GA4IntegrationPanel needs the data.

**Step 1: Add GA4 Service Accounts Query in admin-panel.tsx**

In `/client/src/pages/admin-panel.tsx`, add this query after the other queries (around line 200):

```typescript
// Query for GA4 service accounts (needed for client edit dropdown)
const { data: ga4ServiceAccounts, isLoading: ga4ServiceAccountsLoading } = useQuery<any[]>({
  queryKey: AdminQueryKeys.ga4ServiceAccounts(),
  enabled: user?.role === "Admin", // Always load for admin, not just on specific tab
});
Step 2: Update GA4IntegrationPanel to receive service accounts
Find the GA4IntegrationPanel component usage in the client edit dialog (around line 1950) and pass the service accounts:
typescript<GA4IntegrationPanel 
  clientId={editingItem?.id || null}
  currentGA4PropertyId={editingItem?.ga4PropertyId && /^\d+$/.test(editingItem.ga4PropertyId) ? editingItem.ga4PropertyId : ""}
  serviceAccounts={ga4ServiceAccounts || []}  // ADD THIS LINE
  onGA4PropertyUpdate={(propertyId) => {
    // Update hidden form field for submission
    const hiddenInputId = editingItem?.id ? `hidden-gaPropertyId-${editingItem.id}` : 'hidden-gaPropertyId-new';
    const input = document.querySelector(`#${hiddenInputId}`) as HTMLInputElement;
    if (input) {
      input.value = propertyId;
    }
  }}
  onServiceAccountUpdate={(serviceAccountId) => {
    // Update hidden form field for service account submission
    const hiddenInputId = editingItem?.id ? `hidden-serviceAccount-${editingItem.id}` : 'hidden-serviceAccount-new';
    const input = document.querySelector(`#${hiddenInputId}`) as HTMLInputElement;
    if (input) {
      input.value = serviceAccountId;
    }
  }}
/>
Step 3: Update GA4IntegrationPanel component to use passed service accounts
In /client/src/components/admin/GA4IntegrationPanel.tsx, update the component to accept and use the service accounts prop:
typescriptinterface GA4IntegrationPanelProps {
  clientId: string | null;
  currentGA4PropertyId?: string;
  serviceAccounts?: any[]; // ADD THIS PROP
  onGA4PropertyUpdate?: (propertyId: string) => void;
  onServiceAccountUpdate?: (serviceAccountId: string) => void;
}

export function GA4IntegrationPanel({ 
  clientId, 
  currentGA4PropertyId, 
  serviceAccounts = [], // ADD DEFAULT VALUE
  onGA4PropertyUpdate,
  onServiceAccountUpdate 
}: GA4IntegrationPanelProps) {
  // Remove the internal query for service accounts if it exists
  // Use the passed serviceAccounts prop instead

  // In the dropdown, use the passed serviceAccounts:
  <NativeSelect
    name="serviceAccountId"
    value={selectedServiceAccountId}
    onChange={(e) => {
      setSelectedServiceAccountId(e.target.value);
      onServiceAccountUpdate?.(e.target.value);
    }}
    options={[
      { value: "", label: "Select a service account" },
      ...serviceAccounts
        .filter(sa => sa.isActive) // Only show active accounts
        .map(sa => ({
          value: sa.id,
          label: `${sa.email} (${sa.projectId})`
        }))
    ]}
    placeholder="Choose service account"
    disabled={!serviceAccounts || serviceAccounts.length === 0}
  />

  // Add helper text if no service accounts
  {(!serviceAccounts || serviceAccounts.length === 0) && (
    <p className="text-xs text-amber-600 mt-1">
      No service accounts available. Please add one in the GA4 Accounts tab.
    </p>
  )}
Step 4: Add the AdminQueryKeys for GA4 service accounts if missing
In /client/src/lib/adminQueryKeys.ts, ensure this key exists:
typescriptexport const AdminQueryKeys = {
  // ... existing keys
  ga4ServiceAccounts: () => ['/api/admin/ga4-service-accounts'],
  // ... rest of keys
};
This fix ensures:

GA4 service accounts are fetched when admin panel loads
The data is passed to GA4IntegrationPanel component
The dropdown shows active service accounts
Proper error handling if no accounts exist