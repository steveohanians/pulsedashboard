Good question! You're right - it's better to do one thing at a time. Let's split it up:

# Step 22: First, Clean Up Duplicate Metric Processing

**INSTRUCTION FOR REPLIT:**
Let's fix the duplicate metrics issue first, then we'll add the admin view-as feature separately.

**MODIFY `/client/src/services/unifiedDataService.ts` - ADD DEDUPLICATION:**

Add this new method after the `processMetrics` method:

```typescript
  /**
   * De-duplicate metrics - for pre-calculated averages, we only need one value
   */
  private deduplicateMetrics(metrics: DashboardMetric[]): DashboardMetric[] {
    const seen = new Set<string>();
    const unique: DashboardMetric[] = [];

    for (const metric of metrics) {
      const sourceType = this.normalizeSourceType(metric.sourceType);
      
      // For CD_Avg and Industry_Avg, create a unique key without channel/competitorId
      // since these are pre-calculated averages that don't vary by channel
      let key: string;
      if (sourceType === 'CD_Avg' || sourceType === 'Industry_Avg') {
        key = `${metric.metricName}-${sourceType}-${metric.timePeriod || ''}`;
      } else {
        // For other sources, include all identifying information
        key = `${metric.metricName}-${sourceType}-${metric.channel || ''}-${metric.competitorId || ''}-${metric.timePeriod || ''}`;
      }

      if (!seen.has(key)) {
        seen.add(key);
        unique.push(metric);
      }
    }

    debugLog('UNIFIED', 'Deduplicated metrics', {
      original: metrics.length,
      unique: unique.length,
      removed: metrics.length - unique.length
    });

    return unique;
  }
```

Then UPDATE the `processMetrics` method to use deduplication:

Find this section in `processMetrics`:
```typescript
    // Filter metrics based on time period if needed
    const singlePeriodTarget = timePeriod === "Last Month" ? periods.client : null;
    const metricsToProcess = singlePeriodTarget 
      ? metrics.filter(m => !m.timePeriod || m.timePeriod === singlePeriodTarget)
      : metrics;
```

Replace with:
```typescript
    // Filter metrics based on time period if needed
    const singlePeriodTarget = timePeriod === "Last Month" ? periods.client : null;
    const filteredMetrics = singlePeriodTarget 
      ? metrics.filter(m => !m.timePeriod || m.timePeriod === singlePeriodTarget)
      : metrics;
    
    // De-duplicate metrics before processing
    // For CD_Avg and Industry_Avg, we only need one value per metric since they're pre-calculated
    const metricsToProcess = this.deduplicateMetrics(filteredMetrics);
```

Also, UPDATE the averaging logic to not re-average pre-calculated values:

Find this section:
```typescript
    // Calculate averages from counts
    for (const metricName in result) {
      for (const sourceType in result[metricName]) {
        if (counts[metricName][sourceType] > 0) {
          result[metricName][sourceType] =
            result[metricName][sourceType] / counts[metricName][sourceType];
        }
      }
    }
```

Replace with:
```typescript
    // Calculate averages from counts (but not for pre-calculated averages)
    for (const metricName in result) {
      for (const sourceType in result[metricName]) {
        // Don't re-average CD_Avg and Industry_Avg - they're already averaged
        if (sourceType !== 'CD_Avg' && sourceType !== 'Industry_Avg') {
          if (counts[metricName][sourceType] > 1) {
            result[metricName][sourceType] =
              result[metricName][sourceType] / counts[metricName][sourceType];
          }
        }
      }
    }
```

**After making these changes:**
Tell me "Deduplication complete" and we'll move on to the admin view-as feature in the next step.