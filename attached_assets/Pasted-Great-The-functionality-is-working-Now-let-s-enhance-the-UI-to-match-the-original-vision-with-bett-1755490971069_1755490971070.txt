Great! The functionality is working. Now let's enhance the UI to match the original vision with better visualizations and layout:

```bash
# STEP 9: Enhance the Brand Signals UI to match the original vision
# Add summary cards, stage breakdown, and better visualizations
```

```tsx
// FILE: client/src/pages/brand-signals.tsx
//
// INSTRUCTIONS FOR REPLIT AGENT:
// 1. Find the Results Display section
// 2. REPLACE the entire results Card with this enhanced version
// 3. This adds summary cards, stage breakdown, and visual progress bars

// Find: {/* Analysis Results */}
// REPLACE the entire results section with:

{/* Analysis Results */}
{analysisResults && (
  <>
    {/* Summary Cards Row */}
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
      <Card>
        <CardContent className="p-6">
          <div className="text-xs font-medium text-slate-600 mb-1">Overall SoV</div>
          <div className="text-2xl font-bold text-primary">
            {analysisResults.metrics?.overallSoV?.[analysisResults.summary?.brand] || 0}%
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardContent className="p-6">
          <div className="text-xs font-medium text-slate-600 mb-1">Question Coverage</div>
          <div className="text-2xl font-bold text-primary">
            {analysisResults.metrics?.questionCoverage?.[analysisResults.summary?.brand] || 0}%
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardContent className="p-6">
          <div className="text-xs font-medium text-slate-600 mb-1">Market Leader</div>
          <div className="text-lg font-bold text-slate-800 truncate">
            {(() => {
              const sov = analysisResults.metrics?.overallSoV || {};
              const leader = Object.entries(sov).reduce((a, b) => 
                (b[1] as number) > (a[1] as number) ? b : a, ['None', 0]);
              return leader[0];
            })()}
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardContent className="p-6">
          <div className="text-xs font-medium text-slate-600 mb-1">Total Mentions</div>
          <div className="text-2xl font-bold text-primary">
            {Object.values(analysisResults.metrics?.totalMentions || {})
              .reduce((sum: number, val: any) => sum + (val as number), 0)}
          </div>
        </CardContent>
      </Card>
    </div>

    {/* Stage Performance Breakdown */}
    {analysisResults.questionResults && (
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="text-lg">Performance by Buyer Journey Stage</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            {['awareness', 'consideration', 'decision'].map(stage => {
              const stageQuestions = analysisResults.questionResults.filter((q: any) => q.stage === stage);
              const brandName = analysisResults.summary?.brand;
              
              // Calculate average SoV for this stage
              const stageSoV = stageQuestions.reduce((sum: number, q: any) => {
                return sum + (q.sov?.[brandName] || 0);
              }, 0) / (stageQuestions.length || 1);
              
              // Find stage leader
              const allBrands = new Set<string>();
              stageQuestions.forEach((q: any) => {
                Object.keys(q.sov || {}).forEach(brand => allBrands.add(brand));
              });
              
              const brandAverages = Array.from(allBrands).map(brand => ({
                brand,
                avg: stageQuestions.reduce((sum: number, q: any) => 
                  sum + (q.sov?.[brand] || 0), 0) / (stageQuestions.length || 1)
              }));
              
              const stageLeader = brandAverages.reduce((a, b) => 
                b.avg > a.avg ? b : a, { brand: 'None', avg: 0 });
              
              const stageEmoji = stage === 'awareness' ? 'üîç' : 
                               stage === 'consideration' ? 'ü§î' : '‚úÖ';
              
              return (
                <div key={stage} className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <span className="text-lg">{stageEmoji}</span>
                      <span className="font-medium capitalize">{stage}</span>
                      <span className="text-sm text-slate-500">({stageQuestions.length} questions)</span>
                    </div>
                    <div className="text-sm text-slate-600">
                      Leader: <span className="font-medium">{stageLeader.brand}</span> ({Math.round(stageLeader.avg)}%)
                    </div>
                  </div>
                  <div className="flex items-center gap-4">
                    <span className="text-sm font-medium text-slate-700 w-20">Your SoV:</span>
                    <div className="flex-1">
                      <div className="flex items-center gap-2">
                        <div className="flex-1 bg-slate-200 rounded-full h-3">
                          <div 
                            className="bg-primary h-3 rounded-full transition-all duration-500"
                            style={{ width: `${Math.min(100, Math.round(stageSoV))}%` }}
                          />
                        </div>
                        <span className="text-sm font-bold text-slate-800 w-12 text-right">
                          {Math.round(stageSoV)}%
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>
    )}

    {/* Competitive Comparison */}
    <Card className="mb-6">
      <CardHeader>
        <CardTitle className="text-lg">Share of Voice by Competitor</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {Object.entries(analysisResults.metrics?.overallSoV || {}).map(([brand, percentage]) => (
            <div key={brand} className="flex items-center gap-4">
              <div className="w-32 text-sm font-medium text-slate-700 truncate">{brand}</div>
              <div className="flex-1">
                <div className="flex items-center gap-2">
                  <div className="flex-1 bg-slate-200 rounded-full h-3">
                    <div 
                      className={`h-3 rounded-full transition-all duration-500 ${
                        brand === analysisResults.summary?.brand ? 'bg-primary' : 'bg-slate-400'
                      }`}
                      style={{ width: `${percentage}%` }}
                    />
                  </div>
                  <span className="text-sm font-bold text-slate-800 w-16 text-right">
                    {percentage}%
                  </span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>

    {/* Strategic Insights */}
    <Card className="mb-6">
      <CardHeader>
        <CardTitle className="text-lg flex items-center gap-2">
          <span>üí°</span> Strategic Insights
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {(() => {
            const brandName = analysisResults.summary?.brand;
            const brandSoV = analysisResults.metrics?.overallSoV?.[brandName] || 0;
            const insights = [];
            
            // Generate insights based on data
            if (brandSoV < 20) {
              insights.push({
                type: 'warning',
                title: 'Low Brand Visibility',
                text: 'Your brand has limited presence in AI-generated responses. Consider creating more authoritative content and building stronger brand signals.'
              });
            } else if (brandSoV > 40) {
              insights.push({
                type: 'success',
                title: 'Strong Market Position',
                text: 'Your brand is well-represented in AI responses. Continue building on this momentum with consistent content strategy.'
              });
            }
            
            // Check stage performance
            const stages = ['awareness', 'consideration', 'decision'];
            stages.forEach(stage => {
              const stageQ = analysisResults.questionResults?.filter((q: any) => q.stage === stage) || [];
              const avgSoV = stageQ.reduce((sum: number, q: any) => 
                sum + (q.sov?.[brandName] || 0), 0) / (stageQ.length || 1);
              
              if (avgSoV < 15) {
                insights.push({
                  type: 'warning',
                  title: `Weak ${stage.charAt(0).toUpperCase() + stage.slice(1)} Stage`,
                  text: `Low visibility in ${stage} stage queries. Focus on creating content that addresses ${
                    stage === 'awareness' ? 'educational and introductory topics' :
                    stage === 'consideration' ? 'comparison and evaluation criteria' :
                    'implementation and pricing information'
                  }.`
                });
              }
            });
            
            return insights.map((insight, idx) => (
              <div key={idx} className={`p-3 rounded-lg ${
                insight.type === 'warning' ? 'bg-orange-50' : 'bg-green-50'
              }`}>
                <div className={`font-medium text-sm mb-1 ${
                  insight.type === 'warning' ? 'text-orange-800' : 'text-green-800'
                }`}>
                  {insight.title}
                </div>
                <div className={`text-xs ${
                  insight.type === 'warning' ? 'text-orange-700' : 'text-green-700'
                }`}>
                  {insight.text}
                </div>
              </div>
            ));
          })()}
        </div>
      </CardContent>
    </Card>

    {/* Raw Data Toggle */}
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          Detailed Analysis Data
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowRawData(!showRawData)}
          >
            {showRawData ? 'Hide' : 'Show'} Raw Data
          </Button>
        </CardTitle>
      </CardHeader>
      {showRawData && (
        <CardContent>
          <div className="bg-slate-100 p-4 rounded-lg overflow-x-auto">
            <pre className="text-xs text-slate-700 whitespace-pre-wrap">
              {JSON.stringify(analysisResults, null, 2)}
            </pre>
          </div>
        </CardContent>
      )}
    </Card>
  </>
)}
```

```bash
# What this adds:
# 1. Summary cards at the top (Overall SoV, Coverage, Market Leader, Total Mentions)
# 2. Stage breakdown with visual progress bars and leader identification
# 3. Competitive comparison with horizontal bar charts
# 4. Strategic insights based on the data
# 5. Better visual hierarchy and organization
# 6. All using existing Card components and styles
#
# This matches the original vision while using the existing data structure
```