```markdown
### Add "Check Client Data" Button with Popup Results Dialog to Client Management

Complete implementation to add a button that checks all client data and displays results in a popup dialog.

**Step 1: Add required imports at the top of admin-panel.tsx**

In `/client/src/pages/admin-panel.tsx`, add these to the existing imports (around lines 1-50):

```typescript
import { CheckCircle, XCircle, Loader2 } from "lucide-react"; // Add CheckCircle, XCircle, Loader2 to existing lucide imports
```

**Step 2: Add state variables for the data check dialog**

Find where other state variables are declared (around line 150-200) and add:

```typescript
// State for client data check dialog
const [showDataCheckDialog, setShowDataCheckDialog] = useState(false);
const [dataCheckResults, setDataCheckResults] = useState<any>(null);
const [isCheckingData, setIsCheckingData] = useState(false);
```

**Step 3: Update the Client Management header section**

Find the Client Management section where `activeTab === "clients"` (around line 1200-1300).

Look for this structure:
```typescript
{activeTab === "clients" && (
  <div>
    <div className="flex justify-between items-center mb-6">
      <h2 className="text-2xl font-bold">Client Management</h2>
      <Button onClick={() => handleAdd("client")}>
        <Plus className="h-4 w-4 mr-2" />
        Add Client
      </Button>
    </div>
```

Replace that entire `<div className="flex justify-between items-center mb-6">` block with:

```typescript
<div className="flex justify-between items-center mb-6">
  <h2 className="text-2xl font-bold">Client Management</h2>
  <div className="flex gap-2">
    {/* Check Client Data Button */}
    <Button 
      variant="outline"
      onClick={async () => {
        try {
          setIsCheckingData(true);
          setShowDataCheckDialog(true);
          
          const response = await fetch('/api/debug/verify-client-isolation', {
            credentials: 'include'
          });
          const data = await response.json();
          
          // Store results for dialog display
          setDataCheckResults(data);
          
          // Also log to console for debugging
          console.log('Client Data Check Results:', data);
          
        } catch (error) {
          console.error('Failed to check client data:', error);
          toast({
            title: "Check Failed",
            description: "Could not retrieve client data.",
            variant: "destructive",
          });
          setShowDataCheckDialog(false);
        } finally {
          setIsCheckingData(false);
        }
      }}
    >
      <CheckCircle className="h-4 w-4 mr-2" />
      Check Client Data
    </Button>
    
    {/* Original Add Client Button */}
    <Button onClick={() => handleAdd("client")}>
      <Plus className="h-4 w-4 mr-2" />
      Add Client
    </Button>
  </div>
</div>
```

**Step 4: Add the Results Dialog at the end of the component**

Find the end of the admin-panel component, just before the final `</div>` (around line 3500), and add:

```typescript
{/* Client Data Check Results Dialog */}
<Dialog open={showDataCheckDialog} onOpenChange={setShowDataCheckDialog}>
  <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
    <DialogHeader>
      <DialogTitle className="text-xl font-bold">Client Data Verification Report</DialogTitle>
      <DialogDescription>
        Data isolation and metrics summary for all clients
      </DialogDescription>
    </DialogHeader>
    
    {dataCheckResults && !isCheckingData && (
      <div className="space-y-6">
        {/* Summary Status */}
        <div className={`p-4 rounded-lg border ${
          dataCheckResults.isolation === 'VERIFIED ✅' 
            ? 'bg-green-50 border-green-200' 
            : 'bg-red-50 border-red-200'
        }`}>
          <div className="flex items-center gap-2">
            {dataCheckResults.isolation === 'VERIFIED ✅' ? (
              <CheckCircle className="h-5 w-5 text-green-600" />
            ) : (
              <XCircle className="h-5 w-5 text-red-600" />
            )}
            <span className="font-semibold">
              Isolation Status: {dataCheckResults.isolation}
            </span>
          </div>
          <p className="text-sm text-gray-600 mt-1">
            Checked {dataCheckResults.clientCount} clients • Period: {dataCheckResults.period}
          </p>
        </div>
        
        {/* Client Data Table */}
        <div className="border rounded-lg overflow-hidden">
          <table className="w-full">
            <thead className="bg-gray-50 border-b">
              <tr>
                <th className="text-left px-4 py-3 text-sm font-semibold">Client Name</th>
                <th className="text-left px-4 py-3 text-sm font-semibold">GA4 Property</th>
                <th className="text-center px-4 py-3 text-sm font-semibold">Total Metrics</th>
                <th className="text-center px-4 py-3 text-sm font-semibold">Bounce Rate</th>
                <th className="text-center px-4 py-3 text-sm font-semibold">Session Duration</th>
                <th className="text-center px-4 py-3 text-sm font-semibold">Isolation</th>
              </tr>
            </thead>
            <tbody className="divide-y">
              {dataCheckResults.results.map((client: any, index: number) => (
                <tr key={client.clientId} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                  <td className="px-4 py-3">
                    <div>
                      <div className="font-medium">{client.clientName}</div>
                      <div className="text-xs text-gray-500 font-mono">{client.clientId}</div>
                    </div>
                  </td>
                  <td className="px-4 py-3">
                    {client.ga4PropertyId ? (
                      <span className="text-sm font-mono bg-blue-100 px-2 py-1 rounded">
                        {client.ga4PropertyId}
                      </span>
                    ) : (
                      <span className="text-sm text-gray-400">Not configured</span>
                    )}
                  </td>
                  <td className="px-4 py-3 text-center">
                    <span className={`font-semibold ${
                      client.metricsCount.clientSpecific > 0 ? 'text-green-600' : 'text-gray-400'
                    }`}>
                      {client.metricsCount.clientSpecific}
                    </span>
                  </td>
                  <td className="px-4 py-3 text-center">
                    <span className="text-sm">
                      {client.metricsCount.byType.bounceRate || '-'}
                    </span>
                  </td>
                  <td className="px-4 py-3 text-center">
                    <span className="text-sm">
                      {client.metricsCount.byType.sessionDuration || '-'}
                    </span>
                  </td>
                  <td className="px-4 py-3 text-center">
                    {client.hasCorrectClientId ? (
                      <CheckCircle className="h-5 w-5 text-green-500 mx-auto" />
                    ) : (
                      <XCircle className="h-5 w-5 text-red-500 mx-auto" />
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        
        {/* Footer Information */}
        <div className="text-sm text-gray-600 space-y-1 border-t pt-4">
          <p>• Client-specific metrics are isolated by clientId</p>
          <p>• Each client can only see their own data when logged in</p>
          <p>• Benchmark metrics (Industry_Avg, CD_Avg) are shared across all clients</p>
        </div>
      </div>
    )}
    
    {isCheckingData && (
      <div className="flex items-center justify-center py-8">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <span className="ml-2">Checking client data...</span>
      </div>
    )}
  </DialogContent>
</Dialog>
```

This complete implementation will:
1. Add a "Check Client Data" button next to "Add Client" in the Client Management section
2. When clicked, fetch data verification for all clients
3. Display results in a professional popup dialog with:
   - Green/red status indicator for data isolation
   - Table showing each client's metrics and GA4 configuration
   - Client IDs for debugging
   - Visual checkmarks for data isolation status
4. Show loading spinner while checking
5. Handle errors gracefully with toast notifications

The dialog shows all the important information at a glance without needing to open the browser console.
```

This single prompt adds both the button and the popup dialog with all the necessary code changes in one go. Just apply these 4 steps in order and you'll have a working "Check Client Data" button with a nice popup results dialog.