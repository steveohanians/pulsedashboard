**Step 2: Create API Routes for Benchmark SEMrush Sync**

Create a new file `/server/routes/benchmark-admin.ts` with routes for benchmark company SEMrush operations:

```typescript
import { Router } from 'express';
import { requireAuth, requireAdmin } from '../middleware/auth';
import { storage } from '../storage';
import { BenchmarkIntegration } from '../services/semrush/benchmarkIntegration';
import logger from '../utils/logging/logger';

const router = Router();

/**
 * Sync a single benchmark company from SEMrush
 */
router.post('/sync/:companyId', requireAuth, requireAdmin, async (req, res) => {
  try {
    const { companyId } = req.params;
    
    logger.info(`[Benchmark Admin] Starting SEMrush sync for company ${companyId}`);
    
    // Get the company details
    const company = await storage.getBenchmarkCompanyById(companyId);
    if (!company) {
      return res.status(404).json({ 
        success: false, 
        error: 'Benchmark company not found' 
      });
    }
    
    // Initialize integration service
    const benchmarkIntegration = new BenchmarkIntegration(storage);
    
    // Process the company through SEMrush
    const result = await benchmarkIntegration.processNewBenchmarkCompany(company);
    
    if (result.success) {
      logger.info(`[Benchmark Admin] Successfully synced ${company.name}`, result);
      res.json({
        success: true,
        message: `Successfully synced ${company.name} from SEMrush`,
        data: result
      });
    } else {
      throw new Error(result.error || 'Sync failed');
    }
    
  } catch (error) {
    logger.error('[Benchmark Admin] Sync failed:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Failed to sync benchmark company'
    });
  }
});

/**
 * Sync all benchmark companies from SEMrush
 */
router.post('/sync-all', requireAuth, requireAdmin, async (req, res) => {
  try {
    logger.info('[Benchmark Admin] Starting bulk SEMrush sync for all benchmark companies');
    
    // Get all active benchmark companies
    const companies = await storage.getBenchmarkCompanies();
    const activeCompanies = companies.filter(c => c.active);
    
    if (activeCompanies.length === 0) {
      return res.json({
        success: true,
        message: 'No active benchmark companies to sync',
        data: { companiesSynced: 0 }
      });
    }
    
    // Initialize integration service
    const benchmarkIntegration = new BenchmarkIntegration(storage);
    
    // Track results
    const results = {
      total: activeCompanies.length,
      successful: 0,
      failed: 0,
      details: []
    };
    
    // Process each company
    for (const company of activeCompanies) {
      try {
        const result = await benchmarkIntegration.processNewBenchmarkCompany(company);
        
        if (result.success) {
          results.successful++;
          results.details.push({
            companyId: company.id,
            companyName: company.name,
            success: true,
            metricsStored: result.metricsStored
          });
        } else {
          results.failed++;
          results.details.push({
            companyId: company.id,
            companyName: company.name,
            success: false,
            error: result.error
          });
        }
      } catch (error) {
        results.failed++;
        results.details.push({
          companyId: company.id,
          companyName: company.name,
          success: false,
          error: error.message
        });
        logger.error(`[Benchmark Admin] Failed to sync ${company.name}:`, error);
      }
    }
    
    logger.info('[Benchmark Admin] Bulk sync completed', results);
    
    res.json({
      success: results.failed === 0,
      message: `Synced ${results.successful} of ${results.total} companies`,
      data: results
    });
    
  } catch (error) {
    logger.error('[Benchmark Admin] Bulk sync failed:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Failed to sync benchmark companies'
    });
  }
});

/**
 * Recalculate Industry_Avg from existing benchmark data
 */
router.post('/recalculate-averages', requireAuth, requireAdmin, async (req, res) => {
  try {
    logger.info('[Benchmark Admin] Recalculating Industry averages');
    
    // Initialize integration service
    const benchmarkIntegration = new BenchmarkIntegration(storage);
    
    // Recalculate averages
    await benchmarkIntegration.updateIndustryAverages();
    
    // Get count of Industry_Avg metrics for confirmation
    const industryMetrics = await storage.getMetricsBySourceType('Industry_Avg');
    
    logger.info(`[Benchmark Admin] Industry averages recalculated, ${industryMetrics.length} metrics updated`);
    
    res.json({
      success: true,
      message: 'Industry averages recalculated successfully',
      data: {
        metricsUpdated: industryMetrics.length
      }
    });
    
  } catch (error) {
    logger.error('[Benchmark Admin] Recalculation failed:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Failed to recalculate industry averages'
    });
  }
});

/**
 * Get sync status for all benchmark companies
 */
router.get('/sync-status', requireAuth, requireAdmin, async (req, res) => {
  try {
    const companies = await storage.getBenchmarkCompanies();
    
    // For each company, check if they have metrics
    const status = await Promise.all(companies.map(async (company) => {
      const metrics = await storage.getMetricsByCompanyId(company.id);
      
      return {
        companyId: company.id,
        companyName: company.name,
        websiteUrl: company.websiteUrl,
        active: company.active,
        hasSemrushData: metrics.length > 0,
        metricsCount: metrics.length,
        lastSync: metrics.length > 0 ? metrics[0].createdAt : null
      };
    }));
    
    res.json({
      success: true,
      data: status
    });
    
  } catch (error) {
    logger.error('[Benchmark Admin] Failed to get sync status:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Failed to get sync status'
    });
  }
});

export default router;
```

Now we need to register these routes. Should I show you how to add them to the main routes file?