Excellent! The error handling is complete. Now for the final phase - Phase 8: Testing Infrastructure. This will ensure everything we've built is maintainable and works correctly.
markdown### Phase 8: Create Testing Infrastructure

Let's create a practical testing setup that works well with Replit and tests the critical paths.

**Step 1: Create test utilities**

Create `/client/src/test/test-utils.tsx`:

```typescript
import React from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { render as rtlRender } from '@testing-library/react';
import { vi } from 'vitest';

// Create a test query client
export function createTestQueryClient() {
  return new QueryClient({
    defaultOptions: {
      queries: {
        retry: false,
        gcTime: 0,
      },
      mutations: {
        retry: false,
      },
    },
  });
}

// Custom render with providers
export function render(
  ui: React.ReactElement,
  { queryClient = createTestQueryClient(), ...options } = {}
) {
  function Wrapper({ children }: { children: React.ReactNode }) {
    return (
      <QueryClientProvider client={queryClient}>
        {children}
      </QueryClientProvider>
    );
  }

  return rtlRender(ui, { wrapper: Wrapper, ...options });
}

// Mock services
export const mockServices = {
  clientService: {
    getAll: vi.fn(),
    getById: vi.fn(),
    create: vi.fn(),
    update: vi.fn(),
    delete: vi.fn(),
    triggerGA4Sync: vi.fn(),
    fetchIcon: vi.fn(),
    clearIcon: vi.fn(),
  },
  userService: {
    getAll: vi.fn(),
    getById: vi.fn(),
    create: vi.fn(),
    update: vi.fn(),
    delete: vi.fn(),
    invite: vi.fn(),
    sendPasswordReset: vi.fn(),
  },
  portfolioService: {
    getAll: vi.fn(),
    getById: vi.fn(),
    create: vi.fn(),
    update: vi.fn(),
    delete: vi.fn(),
    recalculateAverages: vi.fn(),
    resyncSemrush: vi.fn(),
    getCompanyData: vi.fn(),
  },
};

// Test data factories
export const testData = {
  createClient: (overrides = {}) => ({
    id: 'client-1',
    name: 'Test Client',
    websiteUrl: 'https://test.com',
    businessSize: 'Medium',
    industryVertical: 'Technology',
    ga4PropertyId: '123456789',
    active: true,
    createdAt: new Date(),
    updatedAt: new Date(),
    ...overrides,
  }),

  createUser: (overrides = {}) => ({
    id: 'user-1',
    name: 'Test User',
    email: 'test@example.com',
    role: 'User' as const,
    status: 'Active' as const,
    clientId: 'client-1',
    createdAt: new Date(),
    updatedAt: new Date(),
    ...overrides,
  }),

  createPortfolioCompany: (overrides = {}) => ({
    id: 'portfolio-1',
    name: 'Portfolio Company',
    websiteUrl: 'https://portfolio.com',
    businessSize: 'Large',
    industryVertical: 'SaaS',
    active: true,
    createdAt: new Date(),
    ...overrides,
  }),
};

export * from '@testing-library/react';
Step 2: Create service tests
Create /client/src/services/api/__tests__/client.service.test.ts:
typescriptimport { describe, it, expect, beforeEach, vi } from 'vitest';
import { clientService } from '../client.service';
import { cacheManager } from '../../cache/CacheManager';
import { eventBus } from '../../events/EventBus';

// Mock dependencies
vi.mock('@/lib/queryClient', () => ({
  apiRequest: vi.fn(),
}));

vi.mock('../../cache/CacheManager', () => ({
  cacheManager: {
    invalidate: vi.fn(),
  },
}));

vi.mock('../../events/EventBus', () => ({
  eventBus: {
    emit: vi.fn(),
  },
}));

describe('ClientService', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('delete', () => {
    it('should delete client and invalidate cache', async () => {
      const { apiRequest } = await import('@/lib/queryClient');
      vi.mocked(apiRequest).mockResolvedValue(undefined);

      await clientService.delete('client-1');

      expect(apiRequest).toHaveBeenCalledWith('DELETE', '/api/admin/clients/client-1', undefined);
      expect(cacheManager.invalidate).toHaveBeenCalledWith('client');
    });
  });

  describe('triggerGA4Sync', () => {
    it('should emit events and call sync endpoint', async () => {
      const { apiRequest } = await import('@/lib/queryClient');
      vi.mocked(apiRequest).mockResolvedValue({ success: true });

      await clientService.triggerGA4Sync('client-1');

      expect(eventBus.emit).toHaveBeenCalledWith('ga4.sync.started', { clientId: 'client-1' });
      expect(apiRequest).toHaveBeenCalledWith('POST', '/api/admin/clients/client-1/sync-ga4', undefined);
      expect(eventBus.emit).toHaveBeenCalledWith('ga4.sync.completed', expect.objectContaining({
        clientId: 'client-1',
      }));
    });

    it('should emit failure event on error', async () => {
      const { apiRequest } = await import('@/lib/queryClient');
      const error = new Error('Sync failed');
      vi.mocked(apiRequest).mockRejectedValue(error);

      await expect(clientService.triggerGA4Sync('client-1')).rejects.toThrow('Sync failed');

      expect(eventBus.emit).toHaveBeenCalledWith('ga4.sync.failed', expect.objectContaining({
        clientId: 'client-1',
        error,
      }));
    });
  });

  describe('createWithGA4Setup', () => {
    it('should create client and trigger GA4 sync if requested', async () => {
      const { apiRequest } = await import('@/lib/queryClient');
      const newClient = { id: 'new-client', name: 'New Client' };
      vi.mocked(apiRequest).mockResolvedValue(newClient);

      const data = {
        name: 'New Client',
        ga4PropertyId: '123456789',
        serviceAccountId: 'sa-1',
        autoSyncGA4: true,
      };

      const result = await clientService.createWithGA4Setup(data);

      expect(result).toEqual(newClient);
      expect(eventBus.emit).toHaveBeenCalledWith('client.created', expect.any(Object));
      expect(eventBus.emit).toHaveBeenCalledWith('client.ga4.connected', expect.any(Object));
      expect(eventBus.emit).toHaveBeenCalledWith('ga4.sync.started', expect.any(Object));
    });
  });
});
Step 3: Create integration test
Create /client/src/__tests__/admin-panel.integration.test.tsx:
typescriptimport { describe, it, expect, beforeEach, vi } from 'vitest';
import { screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { render, mockServices, testData } from '@/test/test-utils';
import AdminPanel from '@/pages/admin-panel';

// Mock the services
vi.mock('@/services/api', () => ({
  ...mockServices,
  cacheManager: {
    invalidate: vi.fn(),
  },
}));

// Mock auth hook
vi.mock('@/hooks/use-auth', () => ({
  useAuth: () => ({ user: { role: 'Admin', id: 'admin-1' } }),
}));

describe('Admin Panel Integration', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    
    // Setup default mock responses
    mockServices.clientService.getAll.mockResolvedValue([
      testData.createClient(),
      testData.createClient({ id: 'client-2', name: 'Client 2' }),
    ]);
    
    mockServices.userService.getAll.mockResolvedValue([
      testData.createUser(),
      testData.createUser({ id: 'user-2', name: 'User 2' }),
    ]);
  });

  it('should load and display clients', async () => {
    render(<AdminPanel />);

    // Click on clients tab
    const clientsTab = screen.getByText('Client Management');
    await userEvent.click(clientsTab);

    // Wait for clients to load
    await waitFor(() => {
      expect(screen.getByText('Test Client')).toBeInTheDocument();
    });

    expect(mockServices.clientService.getAll).toHaveBeenCalled();
  });

  it('should delete a client', async () => {
    mockServices.clientService.delete.mockResolvedValue(undefined);
    
    render(<AdminPanel />);

    // Go to clients tab
    const clientsTab = screen.getByText('Client Management');
    await userEvent.click(clientsTab);

    // Wait for clients to load
    await waitFor(() => {
      expect(screen.getByText('Test Client')).toBeInTheDocument();
    });

    // Click delete button (assuming it's visible)
    const deleteButtons = screen.getAllByLabelText(/delete/i);
    await userEvent.click(deleteButtons[0]);

    // Confirm deletion in dialog
    const confirmButton = await screen.findByText('Delete Client');
    await userEvent.click(confirmButton);

    await waitFor(() => {
      expect(mockServices.clientService.delete).toHaveBeenCalledWith('client-1');
    });
  });

  it('should trigger GA4 sync', async () => {
    mockServices.clientService.triggerGA4Sync.mockResolvedValue(undefined);
    
    render(<AdminPanel />);

    // Test would continue with finding and clicking sync button
    // This is a simplified example
  });
});
Step 4: Create E2E test for critical path
Create /client/src/__tests__/critical-path.e2e.test.ts:
typescriptimport { test, expect } from '@playwright/test';

test.describe('Critical User Paths', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('http://localhost:5173/login');
    
    // Login as admin
    await page.fill('input[name="email"]', 'admin@example.com');
    await page.fill('input[name="password"]', 'password');
    await page.click('button[type="submit"]');
    
    await page.waitForURL('**/dashboard');
  });

  test('Admin can create and delete a client', async ({ page }) => {
    // Navigate to admin panel
    await page.goto('http://localhost:5173/admin');
    
    // Go to clients tab
    await page.click('text=Client Management');
    
    // Click add client
    await page.click('button:has-text("Add Client")');
    
    // Fill form
    await page.fill('input[name="name"]', 'E2E Test Client');
    await page.fill('input[name="website"]', 'https://e2e-test.com');
    await page.selectOption('select[name="businessSize"]', 'Medium');
    await page.selectOption('select[name="industryVertical"]', 'Technology');
    
    // Submit
    await page.click('button:has-text("Create Client")');
    
    // Verify client appears
    await expect(page.locator('text=E2E Test Client')).toBeVisible();
    
    // Delete the client
    const row = page.locator('tr', { has: page.locator('text=E2E Test Client') });
    await row.locator('button[aria-label="Delete"]').click();
    
    // Confirm deletion
    await page.click('button:has-text("Delete Client")');
    
    // Verify client is gone
    await expect(page.locator('text=E2E Test Client')).not.toBeVisible();
  });

  test('Portfolio company triggers SEMrush integration', async ({ page }) => {
    await page.goto('http://localhost:5173/admin?tab=cd-clients');
    
    // Add portfolio company
    await page.click('button:has-text("Add Company")');
    
    // Fill form
    await page.fill('input[name="name"]', 'E2E Portfolio Company');
    await page.fill('input[name="websiteUrl"]', 'https://portfolio-test.com');
    await page.selectOption('select[name="businessSize"]', 'Large');
    await page.selectOption('select[name="industryVertical"]', 'SaaS');
    
    // Submit
    await page.click('button:has-text("Add Company")');
    
    // Verify toast notification appears
    await expect(page.locator('text=Company added - data syncing')).toBeVisible();
  });
});
Step 5: Create test runner script
Create /scripts/run-tests.sh:
bash#!/bin/bash

echo "🧪 Running Pulse Dashboard Tests"
echo "================================"

# Unit tests
echo "📦 Running unit tests..."
npm run test:unit

# Integration tests
echo "🔗 Running integration tests..."
npm run test:integration

# E2E tests (only if server is running)
if curl -s http://localhost:5173 > /dev/null; then
  echo "🌐 Running E2E tests..."
  npm run test:e2e
else
  echo "⚠️  Server not running, skipping E2E tests"
fi

echo "✅ All tests complete!"
This testing infrastructure provides:

Unit tests for services
Integration tests for components
E2E tests for critical paths
Mock utilities for easy testing
Test data factories