You are editing a React 18 + TanStack Query v5 app.

Goal: AI Insights list shows “Regenerating…” forever and no network calls are visible. Instrument and fix the fetch so it always fires when clientId and period are available, and only show the spinner when the server actually says status=“generating”.

Repo context (read first):
- Frontend uses TanStack Query; canonical query key should be ["/api/ai-insights", clientId, canonicalPeriod]. :contentReference[oaicite:0]{index=0}:contentReference[oaicite:1]{index=1}
- Period must be canonical YYYY-MM; older UI sometimes passes “Last Month”. Normalize before fetch. :contentReference[oaicite:2]{index=2}:contentReference[oaicite:3]{index=3}
- AI insights are persisted in `ai_insights` and related `insight_contexts`; list endpoint is `/api/ai-insights/:clientId?period=YYYY-MM` (compat for legacy params may exist). Badge comes from server-computed hasContext. :contentReference[oaicite:4]{index=4}:contentReference[oaicite:5]{index=5}

Edits to make:

1) Add React Query Devtools (development only):
- File: client/src/main.tsx (or App.tsx where QueryClientProvider is)
- Import { ReactQueryDevtools } from "@tanstack/react-query-devtools"
- Render <ReactQueryDevtools initialIsOpen={false} />

2) Create/Update centralized hook client/src/hooks/use-ai-insights.ts:
- Function: useAIInsights(clientId: string | undefined, period: string | undefined)
- Compute canonicalPeriod = toYYYYMM(period ?? "Last Month")
- const enabled = Boolean(clientId) && Boolean(canonicalPeriod)
- return useQuery({
    queryKey: ["/api/ai-insights", clientId, canonicalPeriod],
    enabled,
    retry: 0,
    staleTime: 0,
    refetchOnMount: "always",
    gcTime: 0,
    queryFn: async () => {
      const url = `/api/ai-insights/${encodeURIComponent(clientId!)}` +
                  `?period=${encodeURIComponent(canonicalPeriod!)}`
      console.info("[AI] fetch", { url, clientId, canonicalPeriod })
      const res = await fetch(url, { credentials: "include" })
      if (!res.ok) {
        const text = await res.text()
        console.error("[AI] fetch error", res.status, text)
        throw new Error(`AI insights ${res.status}`)
      }
      const data = await res.json()
      console.info("[AI] data", data)
      return data
    }
  })

- Export toYYYYMM helper inside this file (simple YYYY-MM from Date.now() when input is “Last Month”).
- Ensure there are **no** early returns before useQuery; the hook must always call useQuery with the final `enabled` boolean.

3) Wire the hook everywhere:
- Components: client/src/components/ai-insights.tsx, client/src/components/comprehensive-insights-display.tsx, client/src/components/metric-insight-box.tsx
- Replace any direct fetches or ad-hoc queries with the centralized hook. All should consume the same query result: { data, isLoading, isFetching, error }.

4) Spinner logic fix (prevents infinite “Regenerating…”):
- In each component above, replace local “regenerating” state with:
    const isGenerating = data?.status === "generating" || data?.some?.(x => x.status === "generating")
- Show the loader **only** when isLoading || isFetching || isGenerating.
- If !isLoading && !isFetching && !isGenerating && (!data || data.length === 0), render the empty state (“No insights yet. Click Generate.”).
- Add a console.info with render-time flags: console.info("[AI] render", {isLoading, isFetching, isGenerating, hasData: !!data})

5) Sanity: query keys + invalidation
- Verify all invalidations use the exact same key: ["/api/ai-insights", clientId, canonicalPeriod].
- Remove any references to /api/insights or keys without period.

6) Network visibility:
- Ensure fetch includes { credentials: "include" } to avoid 401 preflight that doesn’t show.
- In the browser, open React Query Devtools and confirm the /api/ai-insights query appears and transitions from “pending → success”.

7) Optional guard (prevents silent disable):
- If enabled === false, log a warning once: console.warn("[AI] query disabled", { clientId, period, canonicalPeriod })

Deliverables:
- Patch files above with instrumentation and the corrected enable/spinner logic.
- Confirm in Devtools: exactly one GET /api/ai-insights/:clientId?period=YYYY-MM per reload.
- Screenshot React Query Devtools showing the query key and “success” state.
