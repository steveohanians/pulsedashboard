Add a reusable shouldIgnoreForPdf filter that skips <iframe>, <video>, and <canvas> (plus anything with data-pdf-hide).

Inject that filter into all html2canvas calls.

Wrap pdf.save(...) with a sandbox-safe fallback (Blob URL + window.open, then postMessage to parent if the popup is blocked).

--- a/PdfExportButton.tsx
+++ b/PdfExportButton.tsx
@@ -16,6 +16,15 @@
   className
 }: PdfExportButtonProps) {
   const [isGenerating, setIsGenerating] = React.useState(false);
+
+  // Elements we must ignore during canvas capture (iframes/canvas/video or anything tagged to hide)
+  const shouldIgnoreForPdf = (el: Element) => {
+    const node = el as HTMLElement;
+    const tag = node.tagName;
+    if (tag === 'IFRAME' || tag === 'VIDEO' || tag === 'CANVAS') return true;
+    return node.hasAttribute('data-pdf-hide') || node.getAttribute('data-pdf-hide') === 'true';
+  };
+
 
@@
-      const canvas = await html2canvas(element, {
+      const canvas = await html2canvas(element, {
         height: sliceHeight,
         width: elementWidth,
         x: 0,
         y: yOffset,
         scrollX: 0,
         scrollY: -yOffset,
         backgroundColor: '#ffffff',
         scale: 1,
         useCORS: true,
         allowTaint: false,
         foreignObjectRendering: false,
         logging: false,
+        ignoreElements: shouldIgnoreForPdf,
         imageTimeout: 15000,
         removeContainer: true,
         async: true,
@@
-          ignoreElements: (el) => {
-            return el.hasAttribute('data-pdf-hide') || el.getAttribute('data-pdf-hide') === 'true';
-          }
+          ignoreElements: shouldIgnoreForPdf
         });
 
         console.info(`Slice ${Math.floor(y / SLICE_HEIGHT) + 1} rendered successfully`);
@@
-      console.info('Saving multi-page PDF with slice-based rendering');
-      pdf.save(downloadName);
+      console.info('Saving multi-page PDF with slice-based rendering');
+      try {
+        pdf.save(downloadName);
+      } catch (e) {
+        console.warn('pdf.save() blocked; using sandbox-safe fallback', e);
+        const blob = pdf.output('blob');
+        const url = URL.createObjectURL(blob);
+        const w = window.open(url, '_blank');
+        if (!w) {
+          window.parent?.postMessage({ type: 'PULSE_PDF_DOWNLOAD', url, fileName: downloadName }, '*');
+        }
+      }
       console.info('PDF export completed successfully');