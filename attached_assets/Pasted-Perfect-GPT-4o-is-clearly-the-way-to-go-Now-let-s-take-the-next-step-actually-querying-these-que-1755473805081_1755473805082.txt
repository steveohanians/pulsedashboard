Perfect! GPT-4o is clearly the way to go. Now let's take the next step - actually querying these questions to see what AI platforms say about the brands.

```bash
# Add the next phase: Query AI with the generated questions
# This tests getting actual responses that we'll analyze for brand mentions
# Still isolated testing, no database changes
```

```javascript
// scripts/test-sov-concept.mjs
import OpenAI from 'openai';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Load environment variables
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config({ path: join(__dirname, '../.env') });

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

async function testBrandUnderstanding() {
  console.log('üß™ Testing SoV Concept - Full Pipeline Test\n');
  
  // Test data
  const testInput = {
    brand: { name: "Notion", url: "notion.so" },
    competitors: [
      { name: "Obsidian", url: "obsidian.md" },
      { name: "Roam Research", url: "roamresearch.com" }
    ],
    vertical: "Knowledge Management"
  };

  try {
    console.log('üìä Analyzing:', testInput.brand.name, 'vs', testInput.competitors.map(c => c.name).join(', '));
    
    // Step 1: Understand brands
    console.log('\nüîç Step 1: Understanding brands...');
    const brandContext = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{
        role: 'user',
        content: `Research these brands and provide a brief summary of what each does:
        - ${testInput.brand.name} (${testInput.brand.url})
        - ${testInput.competitors.map(c => `${c.name} (${c.url})`).join('\n- ')}
        
        Format: Brief 1-2 sentence description for each.`
      }],
      temperature: 0.3
    });
    const brandUnderstanding = brandContext.choices[0].message.content;
    
    // Step 2: Generate questions
    console.log('üéØ Step 2: Generating questions...');
    const questionGeneration = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{
        role: 'system',
        content: 'You are an expert at creating vendor-neutral questions that potential buyers would ask when researching solutions.'
      }, {
        role: 'user',
        content: `Based on these competing brands and what they do:
${brandUnderstanding}

Generate 3 non-branded, vendor-neutral questions (just 3 for this test).
Focus on questions where multiple vendors would likely be mentioned.
Output as a simple numbered list.`
      }],
      temperature: 0.7
    });
    
    const questionsText = questionGeneration.choices[0].message.content;
    const questions = questionsText.split('\n').filter(q => q.match(/^\d/)).map(q => q.replace(/^\d+\.\s*/, ''));
    
    console.log('üìù Generated Questions:', questions.length);
    
    // Step 3: Query AI with questions and analyze mentions
    console.log('\nü§ñ Step 3: Getting AI responses and detecting mentions...\n');
    
    const allBrands = [testInput.brand.name, ...testInput.competitors.map(c => c.name)];
    
    for (const question of questions.slice(0, 2)) { // Just test first 2 questions
      console.log(`\nQuestion: "${question}"`);
      
      // Simulate different AI platform responses (in production, you'd query multiple platforms)
      const aiResponse = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [{
          role: 'system',
          content: 'You are a helpful assistant answering questions about software tools. Provide balanced, informative answers that mention relevant tools when appropriate.'
        }, {
          role: 'user',
          content: question
        }],
        temperature: 0.5
      });
      
      const response = aiResponse.choices[0].message.content;
      console.log('Response preview:', response.substring(0, 150) + '...');
      
      // Detect brand mentions
      const mentions = {};
      let otherBrands = [];
      
      for (const brand of allBrands) {
        // Check for brand name or domain mentions
        const brandRegex = new RegExp(`\\b${brand}\\b`, 'gi');
        const matches = response.match(brandRegex);
        mentions[brand] = matches ? matches.length : 0;
      }
      
      // Detect other brands (simple pattern matching for demo)
      const otherBrandPattern = /\b([A-Z][a-zA-Z]+(?:\s+[A-Z][a-zA-Z]+)?)\b(?=\s+(?:is|offers|provides|has|features))/g;
      let match;
      while ((match = otherBrandPattern.exec(response)) !== null) {
        const potentialBrand = match[1];
        if (!allBrands.includes(potentialBrand) && potentialBrand.length > 3) {
          otherBrands.push(potentialBrand);
        }
      }
      
      console.log('Mentions detected:', mentions);
      if (otherBrands.length > 0) {
        console.log('Other brands detected:', [...new Set(otherBrands)]);
      }
      
      // Calculate simple SoV for this question
      const totalMentions = Object.values(mentions).reduce((a, b) => a + b, 0) + otherBrands.length;
      if (totalMentions > 0) {
        console.log('Share of Voice for this question:');
        for (const [brand, count] of Object.entries(mentions)) {
          if (count > 0) {
            const sov = ((count / totalMentions) * 100).toFixed(1);
            console.log(`  ${brand}: ${sov}%`);
          }
        }
        if (otherBrands.length > 0) {
          const otherSov = ((otherBrands.length / totalMentions) * 100).toFixed(1);
          console.log(`  Others: ${otherSov}%`);
        }
      }
    }
    
    console.log('\n‚úÖ Full pipeline working!');
    console.log('‚úÖ Can generate questions, get responses, detect mentions, calculate SoV!');
    
    // Cost estimate
    console.log(`\nüí∞ This test used ~2000 tokens (~$0.01)`);
    console.log('Full 15-question analysis would be ~$0.05-0.10');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

// Run the test
testBrandUnderstanding();
```

```bash
# Run the full pipeline test:
node scripts/test-sov-concept.mjs

# This now tests the complete flow:
# 1. Understand brands (‚úÖ working)
# 2. Generate questions (‚úÖ working) 
# 3. Query AI with questions (NEW)
# 4. Detect brand mentions in responses (NEW)
# 5. Calculate Share of Voice percentages (NEW)
#
# Still completely safe - just testing the concept
```