Prompt: Replace client PDF with server‑side snapshot export (minimal diff)
Objective

Add a server endpoint that accepts a pre‑rendered HTML snapshot of the current dashboard and returns a PDF generated via headless Chromium (Puppeteer). The client button will serialize the dashboard DOM, POST it to the server, show a loader, then auto‑download the returned PDF. Do not re‑fetch dashboard data or navigate to new pages.

Scope (edit only these)

client/src/components/PdfExportButton.tsx (or the existing export button component)frontend_map_v1

server/routes.ts (register route)backend_map_v1

Add new server file: server/routes/exportPdfRoute.ts

package.json (deps/scripts only if needed for Puppeteer)

Do not modify charts, dashboard data flows, auth, GA4 services, or other endpointsdata_flow_maps_v1data_flow_maps_v1. Leave existing html2canvas/jspdf code in place only if it’s still used elsewhere; otherwise remove dead imports from the button component to avoid bundle bloatconfig_env_map_v1.

Why this approach

Current client approach used html2canvas and/or iframes and hit CSP/iframe sandboxing in Replit; moving rendering server‑side avoids beacon/CSP and cross‑origin script blocksconfig_env_map_v1.

Posting a static HTML snapshot means the server doesn’t regenerate data—no queries, no “print route” that reloads chartsdata_flow_maps_v1.

Exact changes
1) Server: add PDF route (server/routes/exportPdfRoute.ts)
Create POST /api/export/pdf

Middleware: requireAuth, rate‑limit (reuse existing limiter), JSON body size limit 2–4MB.

Input shape:

ts
Copy
Edit
{ html: string; title?: string; page?: { format?: 'A4'|'Letter'; landscape?: boolean; } }
Security:

Strip all <script> and inline event handlers from html.

Use puppeteer to page.setContent(sanitizedHtml, { waitUntil: 'networkidle0' }).

page.setJavaScriptEnabled(false) so the snapshot stays static.

Add a <base href="${req.protocol}://${req.get('host')}/"> at the top so relative /global.css can load; but do not allow any JS execution.

PDF settings: default Letter, printBackground: true, margin ~0.4in.

Response: application/pdf stream with Content-Disposition: attachment; filename="<title||Pulse-Dashboard>.pdf".

Implementation hints:

Add dependency: "puppeteer": "^23.x" in package.json. If Replit needs a slimmer binary, you can alternatively use playwright—but start with Puppeteer.

Register the route in server/routes.ts beside other route registrations; keep existing middlewares unchangedbackend_map_v1.

2) Client: update PdfExportButton.tsx
Replace the iframe/html2canvas path with a snapshot + POST:

Find the dashboard root container element (e.g., #dashboard-root or the main wrapper used in pages/dashboard.tsx)frontend_map_v1.

Clone it and inline computed styles for the subtree (utility included below).

Ensure all <img>/<svg> are preserved; for <canvas> charts, call toDataURL() and replace the canvas with an <img> so it’s printable.

Wrap cloned markup in a minimal HTML document that includes:

<link rel="stylesheet" href="/global.css"> (this file exists and is served by Express static per Vite build)frontend_map_v1config_env_map_v1.

Optional: your existing CSS variables / Tailwind base class on <html class="...">.

POST { html, title } to /api/export/pdf.

While awaiting, show the spinner on the icon. On response, create a blob and download.

Minimal client helper snippets (you implement with your local utils style):

ts
Copy
Edit
// 1) Inline computed styles (enough for print fidelity)
function inlineStyles(root: HTMLElement) {
  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);
  let node = walker.currentNode as HTMLElement | null;
  while (node) {
    const style = window.getComputedStyle(node);
    const cssText = Array.from(style).map(k => `${k}:${style.getPropertyValue(k)};`).join('');
    node.setAttribute('style', cssText);
    node = walker.nextNode() as HTMLElement | null;
  }
}

// 2) Canvas → img fallback (for charts)
function canvasesToImages(root: HTMLElement) {
  root.querySelectorAll('canvas').forEach(c => {
    try {
      const img = document.createElement('img');
      img.src = (c as HTMLCanvasElement).toDataURL('image/png');
      img.width = (c as HTMLCanvasElement).width;
      img.height = (c as HTMLCanvasElement).height;
      c.replaceWith(img);
    } catch {}
  });
}
ts
Copy
Edit
// handleExport() sketch
const node = document.getElementById('dashboard-root'); // match actual id/class used
if (!node) return;
const cloned = node.cloneNode(true) as HTMLElement;
canvasesToImages(cloned);
inlineStyles(cloned);

const htmlDoc = `
<!doctype html>
<html>
  <head>
    <meta charset="utf-8"/>
    <title>Pulse Dashboard</title>
    <link rel="stylesheet" href="/global.css"/>
    <style>
      @page { size: Letter; margin: 0.4in; }
      /* Optional: print tweaks to avoid page breaks in boxes */
      .metric-card { break-inside: avoid; }
    </style>
  </head>
  <body class="bg-white">
    ${cloned.outerHTML}
  </body>
</html>`;

setLoading(true);
const res = await fetch('/api/export/pdf', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ html: htmlDoc, title: 'Pulse Dashboard' })
});
setLoading(false);

if (!res.ok) { /* toast error */ }
const blob = await res.blob();
const url = URL.createObjectURL(blob);
const a = document.createElement('a');
a.href = url; a.download = 'Pulse-Dashboard.pdf';
a.click();
URL.revokeObjectURL(url);
Keep the icon on the header (right side) and only show a loader state on the icon itself; do not navigate the UI. (This aligns with your existing dashboard and export affordancefrontend_map_v1.)

Guardrails / Constraints
No data regeneration: The server renders exact markup sent by the client (no API calls, JS disabled).

Auth unchanged: Reuse existing requireAuth middleware stack; do not alter auth/session configbackend_map_v1.

No new pages/routes for printing: Only POST /api/export/pdf.

CSP-safe: No iframes in the client, no cross‑origin scripts; Puppeteer loads only /global.css from this server.

Bundle hygiene: Remove unused html2canvas/jspdf imports from the button component. Leave the dependencies in package.json as-is unless they become fully unused across the repoconfig_env_map_v1.

Performance: Body size limit ~4MB; reject if larger with a helpful message. Timeout Puppeteer at 20s, close browser on finally.

Styling parity: Use the same Tailwind/shadcn styles already in global.css so cards/charts match screen layoutfrontend_map_v1.

Success criteria (verify manually)
Click export → icon spins → no navigation.

Within a moment, a download starts; PDF matches what’s on screen (same numbers/charts), including competitor/CD/Industry visuals the dashboard already renderedschema_reference_v1.

Toggle filters/time period and export again → PDF mirrors those current selections (because we snapshot the DOM you already see).

No server logs of dashboard API calls during the export (route should only hit /global.css).

Replit console shows no CSP iframe/beacon errors (we removed iframe usage).

Coverage checklist (what you must open/edit)
 client/src/components/PdfExportButton.tsx (replace logic with snapshot POST)frontend_map_v1

 server/routes/exportPdfRoute.ts (new)

 server/routes.ts (register exportPdfRoute, keep middlewares intact)backend_map_v1

 package.json (add puppeteer dep if missing; do not touch other deps)repo_reference-081025

Follow‑up tightening prompt (send after initial change compiles)
Great—now harden and polish:

Security & stability

In exportPdfRoute.ts, sanitize HTML by removing <script> tags and any on*= handlers. Set page.setJavaScriptEnabled(false).

Limit body size to 4MB; return 413 on overflow with JSON { ok:false, error:"Export too large" }.

Add 20s timeout for PDF generation and ensure browser/contexts are always closed in finally.

Fidelity

Ensure printBackground: true, DPI ~96, and consistent fonts. If Tailwind fonts are external, embed a minimal @font-face fallback in the <style> you inject.

Add CSS to avoid card breaks: .card, .metric-insight-box { break-inside: avoid; }.

Observability

Log one line per export: user id, clientId, byte length of HTML, render ms. Use existing logger utilities and keep prod log level appropriatebackend_map_v1.

If NODE_ENV==="production", cap concurrent exports to 2 and return 429 if exceeded, with retry‑after header.

Client UX

On error, stop spinner and show toast: “PDF generation failed. Please try again.”

Disable the button while an export is in flight (idempotence per click).

Name file Pulse-${client?.name || 'Dashboard'}-${YYYYMM}.pdf.

Don’t change anything else

No other endpoints, no GA4/AI flows, no chart code. Keep dashboard data flow untoucheddata_flow_maps_v1.