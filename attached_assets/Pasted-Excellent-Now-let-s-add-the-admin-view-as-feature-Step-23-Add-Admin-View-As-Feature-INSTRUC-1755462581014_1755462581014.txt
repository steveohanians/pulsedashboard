Excellent! Now let's add the admin view-as feature.

# Step 23: Add Admin View-As Feature

**INSTRUCTION FOR REPLIT:**
Now let's add the ability for admins to view the dashboard as any user, which is essential for debugging and customer support.

**FIRST, CREATE THE API ENDPOINT TO GET ALL USERS:**

**CREATE NEW FILE `/server/routes/admin-users.ts`:**

```typescript
import { Router } from 'express';
import { requireAuth, requireAdmin } from '../middleware/auth';
import { db } from '../db';
import { users, clients } from '../db/schema';
import { eq } from 'drizzle-orm';

const router = Router();

/**
 * GET /api/admin/users
 * Get all users for admin view-as feature
 */
router.get('/users', requireAuth, requireAdmin, async (req, res) => {
  try {
    // Get all users with their client information
    const allUsers = await db
      .select({
        id: users.id,
        name: users.name,
        email: users.email,
        clientId: users.clientId,
        role: users.role,
        clientName: clients.name,
      })
      .from(users)
      .leftJoin(clients, eq(users.clientId, clients.id))
      .orderBy(users.name);

    // Format the response
    const formattedUsers = allUsers.map(user => ({
      id: user.id,
      name: user.name,
      email: user.email,
      clientId: user.clientId,
      clientName: user.clientName || 'No Client',
      role: user.role,
      label: `${user.name} (${user.clientName || 'No Client'})`
    }));

    res.json({ 
      success: true,
      users: formattedUsers 
    });
  } catch (error) {
    console.error('Error fetching users:', error);
    res.status(500).json({ 
      success: false,
      error: 'Failed to fetch users' 
    });
  }
});

/**
 * GET /api/admin/view-as/:userId
 * Get dashboard data for a specific user (admin view-as)
 */
router.get('/view-as/:userId', requireAuth, requireAdmin, async (req, res) => {
  try {
    const { userId } = req.params;
    
    // Get the target user's client ID
    const targetUser = await db
      .select({
        clientId: users.clientId,
        name: users.name
      })
      .from(users)
      .where(eq(users.id, userId))
      .limit(1);

    if (!targetUser || targetUser.length === 0) {
      return res.status(404).json({ 
        success: false,
        error: 'User not found' 
      });
    }

    // Return the client ID for the dashboard to use
    res.json({
      success: true,
      clientId: targetUser[0].clientId,
      userName: targetUser[0].name
    });
  } catch (error) {
    console.error('Error in view-as:', error);
    res.status(500).json({ 
      success: false,
      error: 'Failed to get user data' 
    });
  }
});

export default router;
```

**REGISTER THE ROUTE IN THE MAIN SERVER:**

**MODIFY `/server/index.ts` - ADD THE ADMIN USERS ROUTE:**

Add this import at the top:
```typescript
import adminUsersRoutes from './routes/admin-users';
```

Add this route registration (after other admin routes):
```typescript
app.use('/api/admin', adminUsersRoutes);
```

**NOW CREATE THE FRONTEND COMPONENT:**

**CREATE NEW FILE `/client/src/components/admin/ViewAsSelector.tsx`:**

```typescript
import React, { useState, useEffect } from 'react';
import { NativeSelect } from '@/components/ui/native-select';
import { Button } from '@/components/ui/button';
import { User, RefreshCw, Eye } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ViewAsSelectorProps {
  currentUserId: string;
  currentClientId: string;
  isAdmin: boolean;
  onViewAs: (clientId: string, userName: string) => void;
  onReset: () => void;
}

interface UserOption {
  id: string;
  name: string;
  email: string;
  clientId: string;
  clientName: string;
  role: string;
  label: string;
}

export function ViewAsSelector({ 
  currentUserId, 
  currentClientId,
  isAdmin, 
  onViewAs,
  onReset 
}: ViewAsSelectorProps) {
  const [users, setUsers] = useState<UserOption[]>([]);
  const [selectedUserId, setSelectedUserId] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const [isViewingAs, setIsViewingAs] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    if (isAdmin) {
      fetchUsers();
    }
  }, [isAdmin]);

  const fetchUsers = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/admin/users', {
        credentials: 'include'
      });
      
      if (!response.ok) {
        throw new Error('Failed to fetch users');
      }
      
      const data = await response.json();
      if (data.success && data.users) {
        setUsers(data.users);
        // Set current user as default selection
        setSelectedUserId(currentUserId);
      }
    } catch (error) {
      console.error('Failed to fetch users:', error);
      toast({
        title: 'Failed to load users',
        description: 'Could not load user list for view-as feature',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleViewAs = async () => {
    if (!selectedUserId || selectedUserId === currentUserId) {
      return;
    }

    try {
      setLoading(true);
      const response = await fetch(`/api/admin/view-as/${selectedUserId}`, {
        credentials: 'include'
      });
      
      if (!response.ok) {
        throw new Error('Failed to switch view');
      }
      
      const data = await response.json();
      if (data.success) {
        const selectedUser = users.find(u => u.id === selectedUserId);
        onViewAs(data.clientId, data.userName);
        setIsViewingAs(true);
        
        toast({
          title: 'View switched',
          description: `Now viewing as ${selectedUser?.name}`,
          duration: 3000
        });
      }
    } catch (error) {
      console.error('Failed to switch view:', error);
      toast({
        title: 'Failed to switch view',
        description: 'Could not switch to selected user view',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleReset = () => {
    setSelectedUserId(currentUserId);
    setIsViewingAs(false);
    onReset();
    
    toast({
      title: 'View reset',
      description: 'Returned to your own view',
      duration: 3000
    });
  };

  if (!isAdmin) return null;

  return (
    <div className="mb-4 p-3 bg-amber-50 border border-amber-200 rounded-lg">
      <div className="flex items-center gap-3">
        <div className="flex items-center gap-2 text-amber-700">
          <Eye className="h-4 w-4" />
          <span className="text-sm font-medium">Admin View As:</span>
        </div>
        
        <NativeSelect
          value={selectedUserId}
          onChange={(e) => setSelectedUserId(e.target.value)}
          options={users.map(user => ({
            value: user.id,
            label: user.label
          }))}
          disabled={loading}
          className="flex-1 max-w-sm text-sm"
        />
        
        <Button
          size="sm"
          onClick={handleViewAs}
          disabled={loading || !selectedUserId || selectedUserId === currentUserId}
          className="bg-amber-600 hover:bg-amber-700 text-white"
        >
          <Eye className="h-3 w-3 mr-1" />
          View As User
        </Button>
        
        {isViewingAs && (
          <Button
            size="sm"
            variant="outline"
            onClick={handleReset}
            className="border-amber-600 text-amber-600 hover:bg-amber-50"
          >
            <RefreshCw className="h-3 w-3 mr-1" />
            Reset to My View
          </Button>
        )}
      </div>
      
      {isViewingAs && (
        <div className="mt-2 text-xs text-amber-700">
          Currently viewing dashboard as: <strong>{users.find(u => u.id === selectedUserId)?.name}</strong>
        </div>
      )}
    </div>
  );
}
```

**ADD TO DASHBOARD:**

**MODIFY `/client/src/pages/dashboard.tsx`:**

Add import at the top:
```typescript
import { ViewAsSelector } from '@/components/admin/ViewAsSelector';
```

Add state for view-as (after other state declarations, around line 40):
```typescript
  const [viewAsClientId, setViewAsClientId] = useState<string | null>(null);
  const [viewAsUserName, setViewAsUserName] = useState<string | null>(null);
```

Update the useDashboardData hook call to use viewAsClientId:
```typescript
  const {
    // ... existing destructuring
  } = useDashboardData({
    timePeriod: effectiveTimePeriod,
    businessSize,
    industryVertical,
    clientId: viewAsClientId || user?.clientId || '', // Use view-as client ID if set
  });
```

Add the ViewAsSelector component after StatusBanner (around line 550):
```typescript
          <StatusBanner
            clientId={viewAsClientId || user?.clientId || ""}
            timePeriod={timePeriod}
            isAdmin={user?.role === "Admin"}
          />

          {/* Admin View-As Selector */}
          {user?.role === "Admin" && (
            <ViewAsSelector
              currentUserId={user.id}
              currentClientId={user.clientId || ''}
              isAdmin={true}
              onViewAs={(clientId, userName) => {
                setViewAsClientId(clientId);
                setViewAsUserName(userName);
              }}
              onReset={() => {
                setViewAsClientId(null);
                setViewAsUserName(null);
              }}
            />
          )}
```

Update the useDashboardData hook interface:
**MODIFY `/client/src/hooks/useDashboardData.ts`:**

```typescript
interface DashboardHookOptions {
  timePeriod: string;
  businessSize?: string;
  industryVertical?: string;
  clientId?: string; // Add this parameter
}

// Update the function signature
export function useDashboardData({
  timePeriod = 'Last Month',
  businessSize = 'All',
  industryVertical = 'All',
  clientId // Add this parameter
}: DashboardHookOptions): DashboardHookReturn {
```

And update the API call to use the provided clientId:
```typescript
        const result = await apiRequest(
          'GET',
          `/api/dashboard/${clientId || user?.clientId}?timePeriod=${encodeURIComponent(effectiveTimePeriod)}&businessSize=${encodeURIComponent(businessSize)}&industryVertical=${encodeURIComponent(industryVertical)}`
        );
```

**After implementing this:**
Tell me if the view-as selector appears for admin users and if you can see the user list in the dropdown.