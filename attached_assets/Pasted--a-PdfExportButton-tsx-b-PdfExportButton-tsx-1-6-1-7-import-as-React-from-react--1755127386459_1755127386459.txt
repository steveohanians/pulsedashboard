--- a/PdfExportButton.tsx
+++ b/PdfExportButton.tsx
@@ -1,6 +1,7 @@
 import * as React from "react";
 import html2canvas from "html2canvas";
 import jsPDF from "jspdf";
+// (no new imports required)

 type PdfExportButtonProps = {
   targetId: string;
@@ -18,6 +19,71 @@
   const [isGenerating, setIsGenerating] = React.useState(false);

+  // Elements we must ignore during canvas capture
+  const shouldIgnoreForPdf = (el: Element) => {
+    const node = el as HTMLElement;
+    const tag = node.tagName;
+    if (tag === "IFRAME" || tag === "VIDEO" || tag === "CANVAS") return true;
+    return (
+      node.hasAttribute("data-pdf-hide") ||
+      node.getAttribute("data-pdf-hide") === "true"
+    );
+  };
+
+  // -------- Sandbox-safe download helpers (work inside/outside iframes) --------
+  const isEmbedded = () => {
+    try {
+      return window.self !== window.top;
+    } catch {
+      // Cross-origin access throws; treat as embedded
+      return true;
+    }
+  };
+
+  const triggerDirectDownload = (url: string, fileName: string) => {
+    const a = document.createElement("a");
+    a.href = url;
+    a.download = fileName;
+    document.body.appendChild(a);
+    a.click();
+    a.remove();
+  };
+
+  const askParentToDownload = async (url: string, fileName: string) => {
+    // Use a specific origin when possible; fall back to "*"
+    const origin =
+      document.referrer ? new URL(document.referrer).origin : "*";
+    const messageId = `PULSE_PDF_${Date.now()}_${Math.random()
+      .toString(36)
+      .slice(2)}`;
+
+    const ack = new Promise<boolean>((resolve) => {
+      const handler = (e: MessageEvent) => {
+        if (origin !== "*" && e.origin !== origin) return;
+        const data = e.data as any;
+        if (data && data.type === "PULSE_PDF_DOWNLOAD_ACK" && data.messageId === messageId) {
+          window.removeEventListener("message", handler);
+          resolve(true);
+        }
+      };
+      window.addEventListener("message", handler, { once: true });
+      // If no ACK arrives quickly, fall back locally (prevents console errors)
+      setTimeout(() => resolve(false), 1200);
+    });
+
+    try {
+      window.parent?.postMessage(
+        { type: "PULSE_PDF_DOWNLOAD", url, fileName, messageId },
+        origin
+      );
+    } catch {
+      // If posting fails, treat as unhandled by parent
+      return false;
+    }
+    return ack;
+  };
+  // ---------------------------------------------------------------------------
+
   const handleExport = async () => {
     if (isGenerating) return;
     setIsGenerating(true);
@@ -80,6 +146,7 @@
       const canvas = await html2canvas(element, {
         height: sliceHeight,
         width: elementWidth,
+        ignoreElements: shouldIgnoreForPdf,
         x: 0,
         y: yOffset,
         scrollX: 0,
@@ -92,7 +159,7 @@
         backgroundColor: "#ffffff",
         scale: 1.2,
         useCORS: true,
-        allowTaint: true,
+        allowTaint: false,
         foreignObjectRendering: false,
         logging: false,
         removeContainer: false,
@@ -168,16 +235,38 @@
     console.info("Saving multi-page PDF with slice-based rendering");
     try {
       pdf.save(downloadName);
     } catch (e) {
-      console.warn("pdf.save() blocked; using sandbox-safe fallback", e);
+      console.warn("pdf.save() blocked; using sandbox-aware fallback", e);
       const blob = pdf.output("blob");
       const url = URL.createObjectURL(blob);
-      const w = window.open(url, "_blank");
-      if (!w) {
-        window.parent?.postMessage(
-          { type: "PULSE_PDF_DOWNLOAD", url, fileName: downloadName },
-          "*"
-        );
-      }
+
+      if (isEmbedded()) {
+        // Try parent first; only rely on it if it ACKs quickly
+        const handledByParent = await askParentToDownload(url, downloadName);
+        if (!handledByParent) {
+          // Parent not listening or blockedâ€”fall back locally
+          const w = window.open(url, "_blank");
+          if (!w) triggerDirectDownload(url, downloadName);
+        }
+      } else {
+        // Not embedded: handle download locally (no postMessage, no host errors)
+        const w = window.open(url, "_blank");
+        if (!w) triggerDirectDownload(url, downloadName);
+      }
     }
     console.info("PDF export completed successfully");
   };
