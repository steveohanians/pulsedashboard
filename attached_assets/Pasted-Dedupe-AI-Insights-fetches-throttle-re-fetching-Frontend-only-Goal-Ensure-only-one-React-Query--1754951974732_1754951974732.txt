Dedupe AI Insights fetches + throttle re-fetching (Frontend only)
Goal: Ensure only one React Query request hits /api/ai-insights per page load and period; eliminate rapid refetch loops causing 429.

Edits to make:

Create a single hook client/src/hooks/use-ai-insights.ts that centralizes the query:

ts
Copy
Edit
import { useQuery } from '@tanstack/react-query';

export function useAIInsights(clientId: string | undefined, canonicalPeriod: string | undefined) {
  const enabled = Boolean(clientId && canonicalPeriod);
  const key = ["/api/ai-insights", clientId, canonicalPeriod];

  return useQuery({
    queryKey: key,
    enabled,
    // prevent bursts:
    staleTime: 30_000,
    gcTime: 5 * 60_000,
    refetchOnMount: false,
    refetchOnReconnect: false,
    refetchOnWindowFocus: false,
    retry: 0,
    queryFn: async () => {
      const res = await fetch(`/api/ai-insights/${clientId}?period=${canonicalPeriod}`);
      if (!res.ok) throw new Error(`AI insights ${res.status}`);
      return res.json();
    },
  });
}
Use that hook everywhere AI insights are read:

client/src/components/ai-insights.tsx

client/src/components/comprehensive-insights-display.tsx

client/src/components/metric-insight-box.tsx

Replace any inline useQuery calls for AI insights with:

ts
Copy
Edit
const { data, isFetching } = useAIInsights(clientId, canonicalPeriod);
Normalize invalidations after generate/delete:
Ensure mutations use the exact same key:

ts
Copy
Edit
queryClient.invalidateQueries({ queryKey: ["/api/ai-insights", clientId, canonicalPeriod] });
Remove any remaining invalidations like /api/insights/${clientId} or keys missing the canonicalPeriod.

Guard against duplicate mounts:
If any component renders multiple insight boxes, wrap child components so they accept data from the parent instead of each re‑querying. Parent calls the hook once, children receive props.

Do not change the backend in this step.

Verification (tell me these results):

In Network tab: exactly one GET /api/ai-insights/demo-client-id?period=YYYY-MM per reload.

No more Last%20Month requests.

No 429s.

Clicking Delete → mutation returns 200, and you see a single invalidateQueries → one re‑fetch.