I see the issue! The competitor device data IS being found, but it's showing Desktop: 100%, Mobile: 0% which seems wrong. Plus, it's only showing 1 device (Desktop) instead of both Desktop and Mobile. This suggests the data parsing is incorrect.

# Step 9: Fix Competitor Device Data Parsing

**INSTRUCTION FOR REPLIT:**
The competitor device data is being found but parsed incorrectly. It's showing only Desktop at 100% which is clearly wrong. Let's fix the parsing logic.

**MODIFY `/client/src/services/unifiedDataService.ts` - FIX THE COMPETITOR DEVICE PARSING:**

**FIND THE COMPETITOR PROCESSING SECTION (around line 450-550) AND REPLACE WITH:**

```typescript
    // Process Competitors - FIND AND CORRECTLY PARSE THE REAL DATA
    competitors.forEach((competitor) => {
      let devices: any[] = [];
      let dataFound = false;
      
      // The data exists but needs proper parsing
      // Based on the console log, we're finding data but it's showing Desktop: 100%
      // This suggests the data might be in a different format
      
      // Check for metrics with numeric channels (like Industry_Avg)
      const numericDeviceMetrics = metrics.filter(m => 
        m.metricName === "Device Distribution" &&
        m.sourceType === "Competitor" &&
        m.competitorId === competitor.id &&
        m.channel !== undefined
      );
      
      debugLog('UNIFIED', `Checking competitor ${competitor.domain}`, {
        numericMetricsFound: numericDeviceMetrics.length,
        sample: numericDeviceMetrics[0]
      });
      
      if (numericDeviceMetrics.length > 0) {
        const deviceMap = new Map<string, number>();
        const deviceCounts = new Map<string, number>();
        
        numericDeviceMetrics.forEach(metric => {
          // Convert numeric channel to device name (same as Industry_Avg)
          let deviceName = '';
          if (metric.channel === '0' || metric.channel === 0) {
            deviceName = 'Desktop';
          } else if (metric.channel === '1' || metric.channel === 1) {
            deviceName = 'Mobile';
          } else if (metric.channel === '2' || metric.channel === 2) {
            deviceName = 'Tablet'; // In case there's tablet data
          } else {
            // Try to use channel as-is if it's already a string like "Desktop"
            deviceName = String(metric.channel);
          }
          
          const value = parseFloat(String(metric.value));
          
          if (deviceName && !isNaN(value)) {
            deviceMap.set(deviceName, (deviceMap.get(deviceName) || 0) + value);
            deviceCounts.set(deviceName, (deviceCounts.get(deviceName) || 0) + 1);
          }
        });
        
        // Calculate averages
        deviceMap.forEach((sum, name) => {
          const count = deviceCounts.get(name) || 1;
          const avgValue = sum / count;
          
          // Only add if it's Desktop or Mobile (ignore Tablet for consistency)
          if (name === 'Desktop' || name === 'Mobile') {
            devices.push({
              name,
              value: Math.round(avgValue * 10) / 10,
              percentage: Math.round(avgValue * 10) / 10,
              color: this.getDeviceColor(name)
            });
          }
        });
        
        if (devices.length > 0) {
          dataFound = true;
          debugLog('UNIFIED', `Found device data for competitor ${competitor.domain} using numeric channels`, { 
            devices,
            raw: Array.from(deviceMap.entries())
          });
        }
      }
      
      // If we didn't find numeric channel data, try regular format
      if (!dataFound) {
        const competitorMetrics = deviceMetrics.filter(m => 
          m.sourceType === "Competitor" && 
          m.competitorId === competitor.id
        );
        
        if (competitorMetrics.length > 0) {
          devices = this.aggregateDevicesBySource(competitorMetrics);
          if (devices.length > 0) {
            dataFound = true;
            debugLog('UNIFIED', `Found device data for competitor ${competitor.domain} in regular format`, { devices });
          }
        }
      }
      
      // Ensure we have both Desktop and Mobile
      if (dataFound && devices.length > 0) {
        // Check if we're missing Mobile or Desktop
        const hasDesktop = devices.find(d => d.name === 'Desktop');
        const hasMobile = devices.find(d => d.name === 'Mobile');
        
        // If we only have Desktop at 100%, something's wrong - likely missing Mobile data
        if (hasDesktop && !hasMobile) {
          // This shouldn't happen with real data, log warning
          debugLog('UNIFIED', `WARNING: Competitor ${competitor.domain} only has Desktop data`, { devices });
          // Don't add incomplete data
          dataFound = false;
        } else if (!hasDesktop && hasMobile) {
          // This shouldn't happen either
          debugLog('UNIFIED', `WARNING: Competitor ${competitor.domain} only has Mobile data`, { devices });
          dataFound = false;
        } else if (hasDesktop && hasMobile) {
          // Normalize percentages to ensure they sum to 100
          const total = hasDesktop.value + hasMobile.value;
          if (total > 0 && Math.abs(total - 100) > 1) {
            devices.forEach(device => {
              device.value = Math.round((device.value / total) * 1000) / 10;
              device.percentage = device.value;
            });
          }
        }
      }
      
      // Only add to result if we have complete data (both Desktop and Mobile)
      if (dataFound && devices.length >= 2) {
        result.push({
          sourceType: `Competitor_${competitor.id}`,
          label: this.cleanDomainName(competitor.domain),
          devices: devices
        });
        
        debugLog('UNIFIED', `✅ Added competitor ${competitor.domain} to device distribution`, { 
          devices: devices.map(d => `${d.name}: ${d.value}%`).join(', ')
        });
      } else {
        // Log why we're not including this competitor
        debugLog('UNIFIED', `❌ Competitor ${competitor.domain} excluded - incomplete device data`, {
          dataFound,
          deviceCount: devices.length,
          devices
        });
      }
    });
```

The issue is that the competitor data shows Desktop: 100% with no Mobile data, which is clearly incorrect. This fix:
1. Properly parses numeric channel data (0=Desktop, 1=Mobile)
2. Validates that we have BOTH Desktop and Mobile data
3. Only includes competitors with complete data
4. Normalizes percentages to sum to 100%
5. Excludes competitors with incomplete data (rather than showing wrong data)

This maintains data integrity - we only show competitors when we have complete, valid device distribution data.