```bash
# STEP 11: Add clickable "Questions" link that shows a popup with actual questions
# Only the specific area that needs to be modified in brand-signals.tsx
```

```tsx
// FILE: client/src/pages/brand-signals.tsx
//
// INSTRUCTIONS FOR REPLIT AGENT:
// 1. Add this import at the top with other imports:
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";

// 2. Add this state variable with the other useState declarations:
const [showQuestionsDialog, setShowQuestionsDialog] = useState(false);

// 3. Find the Stage Performance Breakdown section and REPLACE just the stage title part:

// FIND THIS PART (inside the Stage Performance Breakdown):
<span className="text-sm text-slate-500">({stageQuestions.length} questions)</span>

// REPLACE WITH:
<button 
  onClick={() => setShowQuestionsDialog(true)}
  className="text-sm text-slate-500 hover:text-primary underline cursor-pointer"
>
  ({stageQuestions.length} questions)
</button>

// 4. ADD this Dialog component right AFTER the Stage Performance Card (before Competitive Comparison):

{/* Questions Dialog */}
{showQuestionsDialog && analysisResults.questionResults && (
  <Dialog open={showQuestionsDialog} onOpenChange={setShowQuestionsDialog}>
    <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto">
      <DialogHeader>
        <DialogTitle>Research Questions by Stage</DialogTitle>
      </DialogHeader>
      <div className="space-y-6 mt-4">
        {['awareness', 'consideration', 'decision'].map(stage => {
          const stageQuestions = analysisResults.questionResults.filter((q: any) => q.stage === stage);
          const stageEmoji = stage === 'awareness' ? 'üîç' : 
                           stage === 'consideration' ? 'ü§î' : '‚úÖ';
          
          return (
            <div key={stage}>
              <h3 className="font-medium text-sm mb-3 flex items-center gap-2">
                <span>{stageEmoji}</span>
                <span className="capitalize">{stage} Stage</span>
                <span className="text-slate-500">({stageQuestions.length} questions)</span>
              </h3>
              <div className="space-y-2">
                {stageQuestions.map((q: any, idx: number) => (
                  <div key={idx} className="bg-slate-50 p-3 rounded-lg">
                    <p className="text-sm text-slate-700 mb-2">{q.question}</p>
                    <div className="text-xs text-slate-500">
                      Share of Voice: {Object.entries(q.sov || {}).map(([brand, pct]) => 
                        `${brand}: ${pct}%`
                      ).join(', ') || 'No mentions detected'}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          );
        })}
      </div>
    </DialogContent>
  </Dialog>
)}
```

```bash
# What this adds:
# 1. Makes "questions" clickable in each stage row
# 2. Opens a dialog showing all 15 questions organized by stage
# 3. Shows the actual question text and SoV breakdown for each
# 4. Uses existing Dialog components from your UI library
# 
# The word "questions" becomes an underlined link that opens the popup
```