Fix “With Context” badge not showing
You are editing a React + Node/Express + Drizzle app (Pulse Dashboard). The “With Context” badge on AI Insights should render when the insight has associated user context. It currently never shows even after I add context and regenerate.

Goal
Make the UI show a small “With Context” badge on each metric insight if that insight has context. The server must be the source of truth (no client-side guessing).

Constraints (repo truths)
Backend stores AI insights in aiInsights with fields including contextText, insightText, recommendationText, timePeriod (YYYY‑MM)schema_reference_v1.

User-supplied context lives in insightContexts keyed by clientId + metricName (and updated timestamps)schema_reference_v1.

Frontend has components ai-insights.tsx, comprehensive-insights-display.tsx, metric-insight-box.tsx that render insightsfrontend_map_v1.

Frontend uses TanStack Query with a canonical key like ["/api/ai-insights", clientId, canonicalPeriod] (already centralized).

GET endpoint is /api/ai-insights/:clientId?period=YYYY-MM (or whatever exists today for AI insights — do not rename routes) and should return insights: Array<...>repo_reference-081025.

What to change (minimal surface)
Server: compute hasContext

In the server’s AI insights retrieval path (route handler + storage/repo function), return each insight with a boolean hasContext.

Definition of hasContext: true if either aiInsights.contextText is non-empty or a matching insightContexts row exists for the same (clientId, metricName) (regardless of timePeriod). Prefer period match if you already store period for contexts; otherwise, metric-level context is acceptable for now.

Implement with a single query using LEFT JOIN on insightContexts (or two queries merged in code if Drizzle typing makes join awkward).

Response shape must contain:

json
Copy
Edit
{
  "ok": true,
  "period": "YYYY-MM",
  "insights": [
    {
      "metricName": "Session Duration",
      "insightText": "...",
      "recommendationText": "...",
      "contextText": "...",        // may be null
      "hasContext": true           // <-- new, server-computed
    }
  ]
}
Do not break existing fields or endpoint URL. Just add hasContext.

Reference: aiInsights table fields (includes contextText, timePeriod) and insightContexts table (stores user-provided context)schema_reference_v1.

Frontend: render the badge from server truth

In metric-insight-box.tsx, read insight.hasContext from the data returned by the centralized hook.

If hasContext === true, render a small <Badge variant="secondary">With Context</Badge> (or the existing badge component).

Do not re-derive hasContext on the client from local state; rely only on the server-provided flag.

Ensure the centralized use-ai-insights.ts hook (or equivalent) does not strip hasContext during mapping.

Invalidation

When user adds/updates context or regenerates an insight, invalidate the canonical key ["/api/ai-insights", clientId, canonicalPeriod] so the next fetch returns updated hasContext.

File targets (name patterns)
Server:

server/routes.ts (or the ai-insights route file if split) — GET handler that returns insightsbackend_map_v1.

server/storage.ts (or repo/service file that loads insights) — add join/merge to compute hasContextrepo_reference-081025.

Frontend:

client/src/components/metric-insight-box.tsx — show the badge.

client/src/components/ai-insights.tsx and/or client/src/components/comprehensive-insights-display.tsx — pass through the hasContext property untouchedfrontend_map_v1.

client/src/hooks/use-ai-insights.ts — ensure the fetch returns hasContext and is typed accordingly.

Type & test updates
Add a shared TS type:

ts
Copy
Edit
export interface AIInsightDTO {
  metricName: string;
  insightText: string | null;
  recommendationText: string | null;
  contextText: string | null;
  hasContext: boolean;      // <-- new
  timePeriod: string;
}
Update any Zod schema if present to include hasContext: z.boolean().

Logging: On the server, log the count of insights with hasContext=true for the request (debug level).

Acceptance checks (run these after code changes)
Generate → Add context → Regenerate

Reload the page: badge “With Context” must be visible next to that metric’s insight.

Reload persistence

Full refresh (Ctrl+R): badge must still appear (proves DB-backed truth).

Delete

Delete the insight. After invalidation/refetch, that metric’s card should show the empty state and no badge. Page reload should not resurrect it.

Quick verification scripts (dev console / terminal)
Browser console after reload:

Should see fetched JSON where an insight entry includes "hasContext": true.

cURL (replace host & cookie if needed):

nginx
Copy
Edit
curl "<BASE>/api/ai-insights/demo-client-id?period=2025-07" \
  -H "Accept: application/json" -i
Expect hasContext booleans present in each item.

Make these changes without renaming endpoints or altering unrelated flows. Keep the diff minimal and focused on computing and returning hasContext, then rendering it.