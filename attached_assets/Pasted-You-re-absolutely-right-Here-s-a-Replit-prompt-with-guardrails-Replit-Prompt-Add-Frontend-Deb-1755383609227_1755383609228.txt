You're absolutely right. Here's a Replit prompt with guardrails:

## Replit Prompt: Add Frontend Debug Logging and Check Output

```typescript
// Add this debug code to client/src/pages/dashboard.tsx
// Find the line with "const groupedMetrics = useMemo" (around line 300-400)
// Add this useEffect RIGHT AFTER the groupedMetrics useMemo block ends
// DO NOT replace anything, just ADD this after the useMemo

useEffect(() => {
  if (metrics && metrics.length > 0) {
    const industryAvgMetrics = metrics.filter(m => m.sourceType === 'Industry_Avg');
    const coreMetrics = ['Bounce Rate', 'Session Duration', 'Pages per Session', 'Sessions per User'];
    
    // Use console.error so it shows in server logs too
    console.error('🔍 FRONTEND DEBUG - Industry_Avg Analysis:');
    console.error('Total metrics:', metrics.length);
    console.error('Industry_Avg metrics found:', industryAvgMetrics.length);
    
    coreMetrics.forEach(metricName => {
      const metricData = groupedMetrics[metricName] || {};
      const industryMetric = industryAvgMetrics.find(m => m.metricName === metricName);
      
      console.error(`📊 ${metricName}:`, JSON.stringify({
        'In_groupedMetrics': metricData.Industry_Avg,
        'Raw_Industry_Avg': industryMetric?.value,
        'Has_CD_Avg': metricData.CD_Avg,
        'Has_Client': metricData.Client
      }));
    });
    
    const periods = [...new Set(metrics.map(m => m.timePeriod))];
    console.error('🗓️ Time periods in data:', periods);
    console.error('📍 Current timePeriod filter:', timePeriod);
  }
}, [metrics, groupedMetrics, timePeriod]);

// After adding this code, check the server logs for "🔍 FRONTEND DEBUG"
// The debug output will appear when the dashboard loads
// Look for patterns like Industry_Avg being undefined in groupedMetrics
```

After adding this code, have Replit:
1. Save the file
2. Wait for auto-reload  
3. Search the logs for "🔍 FRONTEND DEBUG"
4. Share what appears in the logs with those emojis

**Guardrails:**
- Uses `console.error` to ensure it appears in server logs
- Uses JSON.stringify to avoid object display issues
- Only ADDS code, doesn't replace anything
- Includes specific search string "🔍 FRONTEND DEBUG" to find output