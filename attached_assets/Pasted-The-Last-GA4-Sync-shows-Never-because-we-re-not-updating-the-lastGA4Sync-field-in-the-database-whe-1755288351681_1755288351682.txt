The Last GA4 Sync shows "Never" because we're not updating the lastGA4Sync field in the database when syncs complete. Let's fix this:
markdown### Fix Last GA4 Sync Timestamp Not Being Updated

The sync is working but not updating the lastGA4Sync field in the clients table.

**Step 1: Ensure the lastGA4Sync column exists in the database**

In `/shared/schema/clients.ts`, make sure this field exists in the clients table:

```typescript
export const clients = pgTable("clients", {
  // ... existing fields
  lastGA4Sync: timestamp("last_ga4_sync", { withTimezone: true }),
  // ... rest of fields
});
Step 2: Update the GA4 sync endpoint to save the timestamp
In /server/routes.ts, find the /api/ga4-sync/:clientId endpoint and ensure it updates the timestamp after successful sync:
typescriptapp.post('/api/ga4-sync/:clientId', requireAuth, async (req, res) => {
  try {
    const { clientId } = req.params;
    
    console.log(`[GA4 SYNC] Starting sync for client: ${clientId}`);
    
    // ... existing sync code ...
    
    // After successful sync, UPDATE THE TIMESTAMP
    try {
      // Import the actual sync function and run it
      const { executeCompleteGA4DataSync } = await import('./services/ga4/GA4DataManager');
      const syncResult = await executeCompleteGA4DataSync(clientId);
      
      // IMPORTANT: Update the lastGA4Sync timestamp after successful sync
      console.log(`[GA4 SYNC] Updating lastGA4Sync timestamp for client ${clientId}`);
      await storage.updateClient(clientId, {
        lastGA4Sync: new Date()
      });
      
      // Verify the update worked
      const updatedClient = await storage.getClient(clientId);
      console.log(`[GA4 SYNC] Client lastGA4Sync updated to:`, updatedClient?.lastGA4Sync);
      
    } catch (syncError) {
      // Try fallback method
      const { populateHistoricalData } = await import('./services/ga4/dataFetcher');
      await populateHistoricalData(clientId);
      
      // Still update timestamp even with fallback method
      console.log(`[GA4 SYNC] Updating lastGA4Sync timestamp (fallback method)`);
      await storage.updateClient(clientId, {
        lastGA4Sync: new Date()
      });
    }
    
    // Get the updated client to confirm
    const client = await storage.getClient(clientId);
    
    // Get metrics count after sync
    const metricsAfterSync = await storage.getMetricsByClient(clientId, 'Last Month');
    const clientMetricsCount = metricsAfterSync.filter(m => m.sourceType === 'Client').length;
    
    res.json({
      success: true,
      message: `GA4 sync completed. ${clientMetricsCount} metrics stored.`,
      clientId,
      clientName: client?.name,
      lastGA4Sync: client?.lastGA4Sync, // Include in response
      metricsStored: clientMetricsCount,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('[GA4 SYNC] Error:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'GA4 sync failed'
    });
  }
});
Step 3: Update the storage.updateClient method to handle lastGA4Sync
In /server/storage.ts, make sure the updateClient method can update the lastGA4Sync field:
typescriptasync updateClient(id: string, updateClient: Partial<InsertClient & { lastGA4Sync?: Date }>): Promise<Client | undefined> {
  console.log(`[STORAGE] Updating client ${id} with:`, updateClient);
  
  // If lastGA4Sync is being updated, ensure it's handled
  const updateData: any = { ...updateClient };
  if (updateData.lastGA4Sync) {
    updateData.lastGA4Sync = new Date(updateData.lastGA4Sync);
  }
  
  const result = await this.clientRepo.update(id, updateData);
  console.log(`[STORAGE] Client update result:`, result?.lastGA4Sync);
  return result;
}
Step 4: Run a migration to add the column if it doesn't exist
Create a temporary endpoint to add the column if missing:
typescript// Temporary migration endpoint - add to /server/routes.ts
app.get('/api/admin/add-lastsync-column', requireAuth, async (req, res) => {
  try {
    // Check if column exists
    const result = await db.execute(sql`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'clients' 
      AND column_name = 'last_ga4_sync'
    `);
    
    if (result.rows.length === 0) {
      // Add the column if it doesn't exist
      await db.execute(sql`
        ALTER TABLE clients 
        ADD COLUMN IF NOT EXISTS last_ga4_sync TIMESTAMP WITH TIME ZONE
      `);
      
      res.json({ success: true, message: 'Column added successfully' });
    } else {
      res.json({ success: true, message: 'Column already exists' });
    }
  } catch (error) {
    console.error('Migration error:', error);
    res.status(500).json({ error: error.message });
  }
});