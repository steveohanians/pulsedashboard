On a first-time generate (no context provided), you never clear the flag you render from. You pass the badge prop as:

tsx
Copy
Edit
hasCustomContext={insight.hasContext === true}
from MetricInsightBox 
 — but in your generate success handler you set:

tsx
Copy
Edit
setInsight({ ...data.insight, isTyping: true, isFromStorage: false });
(no hasContext override) 
.
If the prior state (from preloaded/canonical data) had hasContext: true or the server returns hasContext: true by default, the prop stays true and the badge shows even though no context was used.

You also still clear hasCustomContext (not hasContext) when regenerating without context, which doesn’t affect the rendered prop. 

Minimal, safe fix (frontend-only)
Unify on hasContext and force the correct value in each code path:

First-time generate (no context): force false

diff
Copy
Edit
// generateInsightMutation.onSuccess
- setInsight({ ...data.insight, isTyping: true, isFromStorage: false });
+ setInsight({ ...data.insight, isTyping: true, isFromStorage: false, hasContext: false });


Regenerate without context: clear the same flag you render from

diff
Copy
Edit
// onRegenerate fallback
- setInsight(current => current ? { ...current, hasCustomContext: false } : current);
+ setInsight(current => current ? { ...current, hasContext: false } : current);


Generate with context: set it true (not hasCustomContext)

diff
Copy
Edit
// generateInsightWithContextMutation.onSuccess
- setInsight({ ...data.insight, isTyping: true, isFromStorage: false, hasCustomContext: true });
+ setInsight({ ...data.insight, isTyping: true, isFromStorage: false, hasContext: true });


Canonical/preloaded mapping: keep using the server-computed hasContext and stop writing hasCustomContext there:

diff
Copy
Edit
// canonicalInsights effect
- hasCustomContext: matchingInsight.hasContext === true,
+ hasContext: matchingInsight.hasContext === true,


After that, your existing prop stays correct:

tsx
Copy
Edit
<AIInsights … hasCustomContext={insight.hasContext === true} />
so the badge in AIInsights only renders when it should:
{hasCustomContext === true && <Badge>With Context</Badge>} 