## Complete Universal Prompt for Brand Story Extraction Fix:

"The brand story extraction is fundamentally broken - it's grabbing random unrelated fragments including blog titles, service descriptions, and duplicate content. Completely rewrite the logic to extract ONLY actual brand narrative with proper structure and labels. Requirements:

### 1. Define What IS and ISN'T Brand Story
```javascript
// Brand story INCLUDES:
const brandStoryIndicators = [
  /who we are|what we do|why we exist/i,
  /years of (experience|success|expertise)/i,
  /founded|established|since \d{4}/i,
  /our (mission|vision|purpose|goal)/i,
  /committed to|dedicated to|passionate about/i,
  /our approach|our philosophy|our values/i,
  /what makes us different|sets us apart/i
];

// Brand story EXCLUDES:
const notBrandStory = [
  /guide to|tips for|how to|trends in|best practices/i,
  /our services include|services we offer/i,
  /case study|client story|testimonial|said/i,
  /click here|learn more|see more|read more/i,
  /\d{4}\s+(trends|guide|strategy|tips)/i,
  /blog|article|post|whitepaper/i,
  /Â©|copyright|privacy|cookie|terms/i
];

// Filter function
function isBrandStoryContent(text) {
  // Exclude if matches non-story patterns
  if (notBrandStory.some(pattern => pattern.test(text))) {
    return false;
  }
  // Include if matches story patterns OR is in right location
  return brandStoryIndicators.some(pattern => pattern.test(text)) ||
         text.length > 50 && text.length < 300;
}
```

### 2. Smart Section Detection
```javascript
function extractBrandStory($) {
  let brandStoryContent = [];
  
  // Priority 1: Look for dedicated brand sections
  const primarySelectors = [
    '.intro, [class*="intro"]:not([class*="service"])',
    '[class*="about"]:not([class*="service"])',
    '[class*="story"]',
    '[class*="mission"]',
    '[class*="value"]:not([class*="service"])',
    'section:nth-child(2)', // Often contains brand story
    'section:nth-child(3)'
  ];
  
  // Try each selector until we find good content
  for (const selector of primarySelectors) {
    const section = $(selector).first();
    if (section.length && !section.closest('nav, footer').length) {
      const texts = section.find('h2, h3, h4, h5, p').slice(0, 6)
        .map((_, el) => $(el).text().trim())
        .get()
        .filter(text => isBrandStoryContent(text));
      
      if (texts.length >= 2) {
        brandStoryContent.push(...texts);
        break; // Found good content, stop looking
      }
    }
  }
  
  // Priority 2: If no dedicated section, look for scattered brand elements
  if (brandStoryContent.length < 3) {
    $('h2, h3, h4, h5, p').slice(0, 20).each((_, el) => {
      const $el = $(el);
      const text = $el.text().trim();
      
      // Skip if in navigation or footer
      if ($el.closest('nav, header, footer, aside').length) return;
      
      // Check if it's brand story content
      if (isBrandStoryContent(text)) {
        brandStoryContent.push(text);
      }
    });
  }
  
  return brandStoryContent;
}
```

### 3. Aggressive Deduplication
```javascript
function deduplicateContent(content) {
  const cleaned = [];
  const fingerprints = new Set();
  
  content.forEach(text => {
    // Create multiple fingerprints for better duplicate detection
    const fingerprint1 = text.substring(0, 50).toLowerCase().replace(/\s+/g, '');
    const fingerprint2 = text.substring(0, 30).toLowerCase().replace(/\s+/g, '');
    
    // Check if we've seen this before
    if (!fingerprints.has(fingerprint1) && !fingerprints.has(fingerprint2)) {
      // Also check if this is a substring of existing content
      const isDuplicate = cleaned.some(existing => {
        const similarity = existing.includes(text) || 
                          text.includes(existing) ||
                          (existing.substring(0, 30) === text.substring(0, 30));
        return similarity;
      });
      
      if (!isDuplicate) {
        fingerprints.add(fingerprint1);
        fingerprints.add(fingerprint2);
        cleaned.push(text);
      }
    }
  });
  
  return cleaned;
}
```

### 4. Extract Company Credentials
```javascript
function extractCredentials($) {
  const credentials = [];
  const credentialPatterns = [
    /(\d+)\+?\s*years?\s*(of|in)?\s*(experience|business|success)?/i,
    /since\s+\d{4}/i,
    /founded\s+(in\s+)?\d{4}/i,
    /(\d+)\+?\s*(clients|customers|companies|brands)/i,
    /award[- ]winning/i,
    /recognized|certified|trusted\s+by/i
  ];
  
  // Look specifically for credential content
  $('*').each((_, el) => {
    const text = $(el).text().trim();
    if (text.length < 150 && credentialPatterns.some(p => p.test(text))) {
      // Avoid duplicates from nested elements
      if (!$(el).children().length || el.tagName.match(/^(p|h[2-6]|li)$/i)) {
        credentials.push(text);
      }
    }
  });
  
  return [...new Set(credentials)].slice(0, 3); // Max 3 credentials
}
```

### 5. Build Labeled Narrative Structure
```javascript
function buildLabeledNarrative(contentPieces, credentials) {
  const narrative = {
    FOUNDATION: [],      // Founded/Established/Years
    IDENTITY: [],        // Who we are
    MISSION: [],         // Why we exist
    APPROACH: [],        // How we work
    VALUES: [],          // What we believe
    DIFFERENTIATORS: [], // What sets us apart
    PROOF: [],           // Credentials/Trust
    IMPACT: []           // Results we deliver
  };
  
  // Add credentials to PROOF
  narrative.PROOF = credentials;
  
  // Categorize content with improved patterns
  contentPieces.forEach(text => {
    const lowerText = text.toLowerCase();
    
    if (/\b(founded|established|began|started|since)\b/i.test(text)) {
      narrative.FOUNDATION.push(text);
    } 
    else if (/^(we are|as a|our team|we're a)/i.test(text)) {
      narrative.IDENTITY.push(text);
    } 
    else if (/(our mission|we exist|purpose|dedicated to|committed to)/i.test(text)) {
      narrative.MISSION.push(text);
    } 
    else if (/(our approach|how we|process|method|we work)/i.test(text)) {
      narrative.APPROACH.push(text);
    } 
    else if (/(we believe|our values|philosophy|principles)/i.test(text)) {
      narrative.VALUES.push(text);
    } 
    else if (/(unlike|different|unique|sets us apart|why choose)/i.test(text)) {
      narrative.DIFFERENTIATORS.push(text);
    } 
    else if (/(results|outcomes|impact|achieve|deliver|help)/i.test(text)) {
      narrative.IMPACT.push(text);
    }
    // Default categorization based on content
    else if (lowerText.includes('we') || lowerText.includes('our')) {
      if (text.length < 100) {
        narrative.VALUES.push(text);
      } else {
        narrative.APPROACH.push(text);
      }
    }
  });
  
  // Build labeled output
  const labeledStory = [];
  
  Object.entries(narrative).forEach(([label, content]) => {
    if (content.length > 0) {
      // Take best/first item from each category
      const bestContent = content
        .filter(text => text && text.length > 20)
        .sort((a, b) => b.length - a.length)[0];
      
      if (bestContent) {
        labeledStory.push(`${label}: ${bestContent}`);
      }
    }
  });
  
  return labeledStory;
}
```

### 6. Complete Extraction Function
```javascript
function extractCompleteBrandStory($) {
  // Step 1: Extract brand story content
  const storyContent = extractBrandStory($);
  
  // Step 2: Extract credentials separately
  const credentials = extractCredentials($);
  
  // Step 3: Combine and deduplicate
  const allContent = [...storyContent, ...credentials];
  const deduplicated = deduplicateContent(allContent);
  
  // Step 4: Build labeled narrative
  const labeledNarrative = buildLabeledNarrative(
    deduplicated.filter(text => !credentials.includes(text)),
    credentials
  );
  
  // Step 5: Format output
  if (labeledNarrative.length >= 3) {
    return labeledNarrative.join('\n');
  }
  
  // Step 6: Fallback if insufficient content
  if (labeledNarrative.length < 3) {
    const metaDesc = $('meta[name="description"]').attr('content') || '';
    const ogDesc = $('meta[property="og:description"]').attr('content') || '';
    
    labeledNarrative.push(`IDENTITY: ${metaDesc}`);
    if (ogDesc && ogDesc !== metaDesc) {
      labeledNarrative.push(`MISSION: ${ogDesc}`);
    }
  }
  
  // Return labeled story (max 2500 chars)
  return labeledNarrative
    .filter(line => line.split(': ')[1]?.length > 10) // Ensure content after label
    .slice(0, 8) // Max 8 labeled sections
    .join('\n')
    .substring(0, 2500);
}

// Main execution
const brandStory = extractCompleteBrandStory($);
```

### 7. Expected Output Format
The extraction should return labeled brand story like:
```
FOUNDATION: 20+ years of success
IDENTITY: Award-winning digital agency rooted in Silicon Valley innovation
MISSION: Build and accelerate your website, brand, and digital marketing success
APPROACH: We combine data-driven expertise with hands-on collaboration
VALUES: We believe in building lasting relationships that deliver valuable outcomes
DIFFERENTIATORS: Highly collaborative approach focused on B2B performance
PROOF: Trusted by world's most demanding B2B companies
IMPACT: We provide expert strategic solutions that drive real-world results
```

This complete rewrite ensures clean, labeled brand story extraction without random fragments, duplicates, or irrelevant content."