### Phase 4: Extract Admin Panel Tabs into Separate Components

We'll extract each tab into its own component, keeping all functionality intact.

**Step 1: Create CDPortfolioTab Component (Largest - 553 lines)**

Create file: `/client/src/components/admin/tabs/CDPortfolioTab.tsx`

```typescript
import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from "@/components/ui/dialog";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { NativeSelect } from "@/components/ui/native-select";
import { Badge } from "@/components/ui/badge";
import { Plus, Edit, Trash2, Building, BarChart3, Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { portfolioService } from '@/services/api';
import { AdminQueryKeys } from '@/lib/adminQueryKeys';
import { useEvent } from '@/hooks/use-events';

interface CDPortfolioTabProps {
  filterOptions: any[];
  sortedData: (data: any[], type: string) => any[];
  SortableHeader: React.FC<{ label: string; sortKey: string }>;
}

export function CDPortfolioTab({ filterOptions, sortedData, SortableHeader }: CDPortfolioTabProps) {
  const [editingItem, setEditingItem] = useState<any>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [deletingCompanyId, setDeletingCompanyId] = useState<string | null>(null);
  const [editingCdIndustryVertical, setEditingCdIndustryVertical] = useState<string>("");
  const [dataViewerOpen, setDataViewerOpen] = useState<boolean>(false);
  const [viewingCompanyData, setViewingCompanyData] = useState<any>(null);
  
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Query for CD portfolio companies
  const { data: cdPortfolioCompanies, isLoading: cdPortfolioLoading } = useQuery<any[]>({
    queryKey: AdminQueryKeys.cdPortfolio(),
    enabled: true,
  });

  // Query for company data viewer
  const companyDataQuery = useQuery({
    queryKey: AdminQueryKeys.cdPortfolioData(viewingCompanyData?.id || ''),
    queryFn: async () => {
      if (!viewingCompanyData?.id) return null;
      return await portfolioService.getCompanyData(viewingCompanyData.id);
    },
    enabled: !!viewingCompanyData?.id && dataViewerOpen
  });

  // Event listeners
  useEvent('portfolio.company.added', (payload) => {
    toast({
      title: "Company added - data syncing",
      description: "SEMrush integration started. Charts will update automatically.",
      duration: 4000,
    });
  });

  useEvent('semrush.integration.completed', (payload) => {
    toast({
      title: "Portfolio Integration Complete",
      description: "âœ… Company added successfully! Dashboard data refreshed.",
      duration: 10000,
    });
  });

  // Create CD Portfolio Company Mutation
  const createCdPortfolioCompanyMutation = useMutation({
    mutationFn: async (data: any) => {
      return await portfolioService.create(data);
    },
    onSuccess: (response) => {
      setIsDialogOpen(false);
      setEditingItem(null);
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to add company",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Update CD Portfolio Company Mutation
  const updateCdPortfolioCompanyMutation = useMutation({
    mutationFn: async ({ id, data }: { id: string; data: any }) => {
      return await portfolioService.update(id, data);
    },
    onSuccess: () => {
      setIsDialogOpen(false);
      setEditingItem(null);
      toast({
        title: "Portfolio company updated",
        description: "Portfolio company information has been successfully updated.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to update company",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Delete CD Portfolio Company Mutation
  const deleteCdPortfolioCompanyMutation = useMutation({
    mutationFn: async (id: string) => {
      await portfolioService.delete(id);
    },
    onSuccess: () => {
      setDeletingCompanyId(null);
      toast({
        title: "Company removed from portfolio",
        description: "Portfolio averages recalculated and dashboard data refreshed automatically.",
        duration: 10000,
      });
    },
    onError: (error: Error) => {
      setDeletingCompanyId(null);
      toast({
        title: "Failed to remove company",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Form handlers
  const handleCreateCdPortfolioCompany = (event: React.FormEvent) => {
    event.preventDefault();
    const formData = new FormData(event.currentTarget as HTMLFormElement);
    const data = {
      name: formData.get("name") as string,
      websiteUrl: formData.get("websiteUrl") as string,
      industryVertical: formData.get("industryVertical") as string,
      businessSize: formData.get("businessSize") as string,
      description: formData.get("description") as string || null,
    };
    
    if (!data.name || !data.websiteUrl || !data.industryVertical || !data.businessSize) {
      toast({
        title: "Validation error",
        description: "Name, website URL, industry, and business size are required.",
        variant: "destructive",
      });
      return;
    }
    
    createCdPortfolioCompanyMutation.mutate(data);
  };

  const handleSaveCdPortfolioCompany = (event: React.FormEvent) => {
    event.preventDefault();
    const formData = new FormData(event.currentTarget as HTMLFormElement);
    const data = {
      name: formData.get("name") as string,
      websiteUrl: formData.get("website") as string,
      industryVertical: editingCdIndustryVertical || formData.get("industry") as string,
      businessSize: formData.get("businessSize") as string,
      description: formData.get("description") as string || null,
    };
    
    if (!data.name || !data.websiteUrl) {
      toast({
        title: "Validation error",
        description: "Name and website URL are required.",
        variant: "destructive",
      });
      return;
    }
    
    updateCdPortfolioCompanyMutation.mutate({ id: editingItem.id, data });
  };

  const handleDeleteCdPortfolioCompany = (id: string) => {
    deleteCdPortfolioCompanyMutation.mutate(id);
  };

  // COPY THE ENTIRE JSX FROM admin-panel.tsx TabsContent value="cd-clients"
  // Lines 2434-2987 from admin-panel.tsx
  // This includes all the Cards, Tables, Dialogs, etc.
  
  return (
    <div>
      {/* PASTE THE EXACT JSX HERE FROM admin-panel.tsx lines 2434-2987 */}
      {/* Remove the <TabsContent> wrapper, just the content inside */}
    </div>
  );
}
Step 2: Update admin-panel.tsx to use the new component
In /client/src/pages/admin-panel.tsx:

Add import at the top:

typescriptimport { CDPortfolioTab } from '@/components/admin/tabs/CDPortfolioTab';

Replace the entire <TabsContent value="cd-clients"> section (lines 2434-2987) with:

typescript<TabsContent value="cd-clients">
  <CDPortfolioTab 
    filterOptions={filterOptions}
    sortedData={sortedData}
    SortableHeader={SortableHeader}
  />
</TabsContent>
Step 3: Create the other tab components following the same pattern
Create these files with the same structure:

/client/src/components/admin/tabs/BenchmarkTab.tsx (lines 1955-2434)
/client/src/components/admin/tabs/UsersTab.tsx (lines 1066-1517)
/client/src/components/admin/tabs/ClientsTab.tsx (lines 1517-1955)
/client/src/components/admin/tabs/PromptsTab.tsx (lines 3249-end)
/client/src/components/admin/tabs/FiltersTab.tsx (lines 2987-3191)
/client/src/components/admin/tabs/GA4AccountsTab.tsx (lines 3191-3249)

Step 4: Create an index file for easy imports
Create /client/src/components/admin/tabs/index.ts:
typescriptexport { CDPortfolioTab } from './CDPortfolioTab';
export { BenchmarkTab } from './BenchmarkTab';
export { UsersTab } from './UsersTab';
export { ClientsTab } from './ClientsTab';
export { PromptsTab } from './PromptsTab';
export { FiltersTab } from './FiltersTab';
export { GA4AccountsTab } from './GA4AccountsTab';
Step 5: Update admin-panel.tsx imports
Replace individual imports with:
typescriptimport {
  CDPortfolioTab,
  BenchmarkTab,
  UsersTab,
  ClientsTab,
  PromptsTab,
  FiltersTab,
  GA4AccountsTab
} from '@/components/admin/tabs';
IMPORTANT NOTES:

Copy the EXACT JSX from each TabsContent section
Move all related state variables, mutations, and handlers to the component
Pass shared utilities (sortedData, SortableHeader) as props
Keep all imports needed by each component
Remove the TabsContent wrapper in the extracted component