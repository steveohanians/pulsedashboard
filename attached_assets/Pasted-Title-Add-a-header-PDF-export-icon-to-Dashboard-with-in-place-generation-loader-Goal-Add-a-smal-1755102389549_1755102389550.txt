Title: Add a header PDF export icon to Dashboard with in-place generation + loader

Goal:
Add a small PDF icon button to the Dashboard header/actions row (right side). On click:

Replace the icon with a spinner (loader).

Generate a multi‑page PDF of the visible dashboard without navigating to any new screen.

Auto‑download the PDF when ready, then restore the icon (stop loader).

Files to add/edit (only these):

Add: client/src/components/pdf/PdfExportButton.tsx (self-contained UI + logic)

Edit: client/src/pages/dashboard.tsx (insert the button in the header; provide a ref to the dashboard content root)frontend_map_v1data_flow_maps_v1

(If deps missing) Edit package.json to add: html2canvas and jspdfconfig_env_map_v1.

1) New component: client/src/components/pdf/PdfExportButton.tsx
Create a self‑contained React component that:

Renders a small icon button (shadcn/ui Button variant "ghost"), using lucide-react’s FileDown icon.

While generating, swaps to Loader2 with animate-spin and disables the button.

Accepts a targetRef: RefObject<HTMLElement> (the DOM node to capture).

Uses html2canvas to rasterize the target at 2x scale.

Uses jspdf to paginate if content exceeds one page (A4 portrait), adding additional pages.

Names file Pulse-Dashboard-${clientNameOrId}-${YYYYMMDD}.pdf.

Implementation details:

Respect device pixel ratio by setting scale: 2 in html2canvas.

White background to avoid transparent artifacts.

Split tall content: compute page height in canvas pixels and loop slices into doc.addImage across pages.

Wrap in try/finally to always clear the loader state.

Component API:

ts
Copy
Edit
type PdfExportButtonProps = {
  targetRef: React.RefObject<HTMLElement>;
  fileName?: string;                // optional override
  clientLabel?: string;             // optional (for default file name)
  className?: string;               // pass-through for layout spacing
};
2) Insert into Dashboard header: client/src/pages/dashboard.tsx
Create a const dashboardRootRef = useRef<HTMLDivElement>(null) and attach it to the main dashboard content wrapper (the section that contains the charts, insights, etc.).

In the header/actions row (where refresh lives), render <PdfExportButton ... /> aligned on the far right (or immediately to the right of the existing action buttons).

Pass targetRef={dashboardRootRef}, and pass clientLabel from the loaded client data (e.g., dashboardQuery.data?.client?.name || user?.clientId).

Keep all existing GA4 data fetching intact; we’re only wiring UIdata_flow_maps_v1.

3) Dependencies (only if missing)
If not present, add:

json
Copy
Edit
"html2canvas": "^1.4.1",
"jspdf": "^3.0.1"
Both are already documented in the repo’s dependency map; add them back if they were removedconfig_env_map_v1.

4) Code (implement exact snippets)
Add: client/src/components/pdf/PdfExportButton.tsx

tsx
Copy
Edit
import * as React from "react";
import { Button } from "@/components/ui/button";
import { FileDown, Loader2 } from "lucide-react";

type PdfExportButtonProps = {
  targetRef: React.RefObject<HTMLElement>;
  fileName?: string;
  clientLabel?: string;
  className?: string;
};

export default function PdfExportButton({
  targetRef,
  fileName,
  clientLabel,
  className
}: PdfExportButtonProps) {
  const [isGenerating, setIsGenerating] = React.useState(false);

  const handleExport = async () => {
    if (!targetRef.current || isGenerating) return;
    setIsGenerating(true);
    try {
      const [{ default: html2canvas }, { jsPDF }] = await Promise.all([
        import("html2canvas"),
        import("jspdf")
      ]);

      // Render the target element to canvas
      const element = targetRef.current;
      const canvas = await html2canvas(element, {
        backgroundColor: "#ffffff",
        scale: 2,
        useCORS: true,
        logging: false
      });

      const imgData = canvas.toDataURL("image/png");

      // PDF dimensions (A4 portrait)
      const pdf = new jsPDF({ orientation: "p", unit: "pt", format: "a4" });
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();

      // Scale image to fit page width, then paginate vertically
      const imgWidth = pageWidth;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;

      let remainingHeight = imgHeight;
      let positionY = 0;

      // First page
      pdf.addImage(imgData, "PNG", 0, 0, imgWidth, imgHeight);
      remainingHeight -= pageHeight;
      positionY = -pageHeight;

      // Additional pages if needed
      while (remainingHeight > 0) {
        pdf.addPage();
        pdf.addImage(imgData, "PNG", 0, positionY, imgWidth, imgHeight);
        remainingHeight -= pageHeight;
        positionY -= pageHeight;
      }

      const today = new Date();
      const stamp = `${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, "0")}${String(today.getDate()).padStart(2, "0")}`;
      const base = fileName || `Pulse-Dashboard-${clientLabel || "client"}-${stamp}.pdf`;

      pdf.save(base);
    } catch (err) {
      // (intentionally no console noise per safety rules)
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Button
      type="button"
      variant="ghost"
      size="icon"
      className={className}
      onClick={handleExport}
      disabled={isGenerating}
      aria-label={isGenerating ? "Generating PDF…" : "Export dashboard as PDF"}
      title={isGenerating ? "Generating PDF…" : "Export PDF"}
    >
      {isGenerating ? <Loader2 className="h-4 w-4 animate-spin" /> : <FileDown className="h-4 w-4" />}
    </Button>
  );
}
Edit: client/src/pages/dashboard.tsx (illustrative diff — add the ref and button in header)

tsx
Copy
Edit
// imports near top
import PdfExportButton from "@/components/pdf/PdfExportButton"; // new

// inside component:
const dashboardRootRef = useRef<HTMLDivElement>(null);

// somewhere near the header/actions row JSX:
<header className="... flex items-center justify-between">
  <div className="...">{/* left side title/breadcrumbs */}</div>
  <div className="flex items-center gap-2">
    {/* existing actions like refresh, filters, etc. */}
    <PdfExportButton
      targetRef={dashboardRootRef}
      clientLabel={dashboardQuery.data?.client?.name || user?.clientId}
      className="ml-1"
    />
  </div>
</header>

// wrap the dashboard content (charts, insights, etc.) with the ref
<div ref={dashboardRootRef}>
  {/* existing dashboard content unchanged */}
</div>
Keep all existing data fetching and chart rendering intact (dashboard uses /api/dashboard/:clientId with TanStack Query)data_flow_maps_v1.

5) Validation checklist (manual)
Dashboard loads and shows a small PDF icon on the right side of the header actions.

Clicking the icon disables the button and shows a spinner; no route changes or modal screens.

After a few seconds, the browser download prompt appears with a filename like Pulse-Dashboard-<Client>-YYYYMMDD.pdf.

Spinner returns to the icon after save completes.

Multi-page dashboards produce multi-page PDFs (no cropped content).

App compiles with zero TS errors; GA4, AI Insights, and charts behave exactly as beforefrontend_map_v1data_flow_maps_v1.

If html2canvas/jspdf had to be re‑added, package.json contains them againconfig_env_map_v1.

Safety constraints (apply to this change)
Only add the new PdfExportButton and the minimal header edits in dashboard.tsx.

Do not alter unrelated components, routes, schema, or feature flags.

No refactors, no new logs, no formatting sweeps.

Keep diffs minimal and scoped to PDF export UI/logic.

