Here's a comprehensive prompt to fix the CTA extraction logic:

## Prompt for Replit:

"Fix the CTA extraction logic to capture actual calls-to-action on modern websites. The current code is missing most CTAs because it's using outdated selectors and overly restrictive text matching. Here are the requirements:

### 1. Expand CTA Text Patterns
Modern CTAs use varied language beyond 'get/start/try':
```javascript
const ctaPatterns = [
  // Action-oriented
  /\b(get|start|try|buy|sign|join|download|request|book|schedule|claim|access|unlock|explore|discover)\b/i,
  // Engagement-oriented  
  /\b(learn|see|watch|view|read|browse|shop|compare|calculate|estimate)\b/i,
  // Contact-oriented
  /\b(contact|call|email|chat|talk|speak|connect|reach)\b/i,
  // Conversion-oriented
  /\b(demo|trial|free|quote|pricing|consultation|assessment)\b/i,
  // Navigation-oriented (still CTAs)
  /\b(more|how|why|what|solutions|services|products|plans)\b/i
];

// Find elements matching these patterns
$('a, button, [role="button"], [onclick], [class*="btn"], [class*="button"]').each((_, element) => {
  const $el = $(element);
  const text = $el.text().trim();
  
  if (ctaPatterns.some(pattern => pattern.test(text)) && 
      text.length > 2 && text.length < 50) {
    // Process CTA
  }
});
```

### 2. Look for Visual CTA Indicators
Many CTAs don't have obvious text but have visual styling:
```javascript
// Additional selectors for modern CTAs
const modernCtaSelectors = [
  // Class-based
  '[class*="cta"]',
  '[class*="button"]',
  '[class*="btn"]',
  '[class*="action"]',
  '[class*="link"]',
  
  // Styled links that look like buttons
  'a[class*="primary"]',
  'a[class*="secondary"]',
  'a[class*="tertiary"]',
  
  // Common frameworks
  '.btn-primary, .btn-secondary, .btn-default',
  '.button--primary, .button--secondary',
  
  // Interactive elements
  '[data-action]',
  '[data-click]',
  'span[onclick]',
  'div[role="button"]'
];

// Also check for styled links
$('a').each((_, el) => {
  const $el = $(el);
  const classes = $el.attr('class') || '';
  const style = $el.attr('style') || '';
  
  // Check if it looks like a button (has padding, background, etc.)
  if (classes.match(/btn|button|cta/i) || 
      style.includes('padding') || 
      style.includes('background')) {
    // Likely a CTA
  }
});
```

### 3. Extract CTAs from Different Page Sections
CTAs appear throughout the page, not just in obvious places:
```javascript
// Map CTAs by location for better context
const ctasByLocation = {
  hero: [],
  header: [],
  main: [],
  footer: [],
  sticky: []
};

// Hero CTAs (most important)
$('.hero, [class*="hero"], [class*="banner"], section:first-of-type').find('a, button').each((_, el) => {
  const cta = extractCTA(el);
  if (cta) ctasByLocation.hero.push(cta);
});

// Sticky/Fixed CTAs
$('[style*="fixed"], [style*="sticky"], .sticky, .fixed').find('a, button').each((_, el) => {
  const cta = extractCTA(el);
  if (cta) ctasByLocation.sticky.push(cta);
});

// Navigation CTAs (often missed)
$('nav, header').find('a, button').each((_, el) => {
  const $el = $(el);
  const text = $el.text().trim();
  
  // Look for action-oriented nav items
  if (text.match(/contact|demo|trial|pricing|get started|sign up|log in/i)) {
    ctasByLocation.header.push(extractCTA(el));
  }
});
```

### 4. Better CTA Text Extraction
Handle complex button structures:
```javascript
function extractCTAText(element) {
  const $el = $(element);
  let text = '';
  
  // Try direct text first
  text = $el.text().trim();
  
  // If empty, look for aria-label
  if (!text) {
    text = $el.attr('aria-label') || '';
  }
  
  // If still empty, look for title
  if (!text) {
    text = $el.attr('title') || '';
  }
  
  // If still empty, look for value (for input buttons)
  if (!text) {
    text = $el.attr('value') || '';
  }
  
  // If has icon + text, get just text
  if (text) {
    // Remove icon fonts/symbols
    text = text.replace(/[\ue000-\uf8ff]/g, '').trim();
    // Remove excessive whitespace
    text = text.replace(/\s+/g, ' ').trim();
  }
  
  return text;
}
```

### 5. Improved CTA Classification
Better logic for primary vs secondary:
```javascript
function classifyCTA(cta) {
  const text = cta.text.toLowerCase();
  const classes = cta.classes.toLowerCase();
  
  // Primary indicators
  const primaryIndicators = [
    // Text patterns
    () => /^(get started|start free|try now|sign up|buy now|book now|get demo)/.test(text),
    // Class patterns
    () => /primary|main|hero|cta-main/.test(classes),
    // Position (in hero)
    () => cta.location === 'hero',
    // Size indicators
    () => /large|big|xl/.test(classes)
  ];
  
  // Secondary indicators
  const secondaryIndicators = [
    () => /(learn|read|view|see|watch) more/.test(text),
    () => /secondary|alternate|ghost|outline/.test(classes),
    () => /how|why|about|explore/.test(text)
  ];
  
  // Tertiary indicators (navigation/utility)
  const tertiaryIndicators = [
    () => /contact|support|help|login|account/.test(text),
    () => cta.location === 'footer',
    () => /utility|nav|menu/.test(classes)
  ];
  
  if (primaryIndicators.some(fn => fn())) return 'primary';
  if (secondaryIndicators.some(fn => fn())) return 'secondary';
  if (tertiaryIndicators.some(fn => fn())) return 'tertiary';
  
  return 'other';
}
```

### 6. Handle Modern CTA Patterns
Capture CTAs that use JavaScript or have complex interactions:
```javascript
// Look for elements with click handlers
$('[onclick], [data-action], [data-toggle], [data-target]').each((_, el) => {
  const $el = $(el);
  const text = extractCTAText(el);
  
  if (text && text.length > 0 && text.length < 50) {
    allCTAs.push({
      text,
      tag: el.tagName.toLowerCase(),
      href: $el.attr('href') || $el.attr('data-href') || '#',
      classes: $el.attr('class') || '',
      hasClickHandler: true,
      dataAction: $el.attr('data-action') || $el.attr('onclick')
    });
  }
});

// Look for forms with submit buttons
$('form').each((_, form) => {
  const $form = $(form);
  const submitBtn = $form.find('button[type="submit"], input[type="submit"], button:not([type="button"])').first();
  
  if (submitBtn.length) {
    const text = extractCTAText(submitBtn[0]) || 'Submit';
    allCTAs.push({
      text,
      tag: 'form-submit',
      formAction: $form.attr('action'),
      formMethod: $form.attr('method'),
      classes: submitBtn.attr('class') || '',
      isFormCTA: true
    });
  }
});
```

### 7. Deduplication with Intelligence
Remove duplicates while preserving context:
```javascript
// Smart deduplication
const uniqueCTAs = allCTAs.reduce((acc, cta) => {
  // Check if we already have this CTA text
  const existing = acc.find(c => 
    c.text.toLowerCase() === cta.text.toLowerCase()
  );
  
  if (!existing) {
    acc.push(cta);
  } else {
    // Keep the one with more information
    if (cta.href && !existing.href) {
      existing.href = cta.href;
    }
    if (cta.classes && !existing.classes) {
      existing.classes = cta.classes;
    }
    // Prefer hero/header CTAs over footer
    if (cta.location === 'hero' && existing.location !== 'hero') {
      existing.location = cta.location;
    }
  }
  
  return acc;
}, []);

// Final output should include location context
const output = uniqueCTAs.map(cta => ({
  ...cta,
  type: classifyCTA(cta),
  prominence: calculateProminence(cta)
}));
```

This approach will capture modern CTA patterns by looking for visual indicators beyond just text, understanding modern design patterns, handling complex button structures, and providing better classification of CTA types."