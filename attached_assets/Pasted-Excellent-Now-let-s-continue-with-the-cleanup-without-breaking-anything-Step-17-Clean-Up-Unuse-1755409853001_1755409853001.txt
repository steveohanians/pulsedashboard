Excellent! Now let’s continue with the cleanup without breaking anything.

# Step 17: Clean Up Unused Imports and Simplify Data Flow

**INSTRUCTION FOR REPLIT:**
Let’s clean up unused imports and remove references to functions we’re no longer using, while keeping everything functional.

**MODIFY `/client/src/pages/dashboard.tsx` - CLEAN UP UNUSED CODE:**

**1. REMOVE UNUSED IMPORTS (at the top of the file):**
Look for and remove these if they exist:

```typescript
// REMOVE if present:
import { generateTemporalVariationSync } from '@/utils/chartUtils';
import { deduplicateByChannel, formatPeriodDisplay } from '@/utils/chartUtils';
import { aggregateChannelData, sortChannelsByLegendOrder } from '@/utils/chartGenerators';
import { safeParseJSON, cleanDomainName } from "@/utils/sharedUtilities";
```

**2. REMOVE THE OLD UNUSED FUNCTIONS (if they still exist):**
Look for and remove these functions if they’re defined but not used:

- `processTrafficChannelData()` - we don’t use this anymore
- `processDeviceDistributionData()` - we don’t use this anymore
- Any other functions that reference the old deleted services

**3. SIMPLIFY THE GROUPED METRICS:**
Find this section (around line 250-270):

```typescript
  // Get processed metrics from unified service
  const groupedMetrics = processedData?.metrics || {};
  const trafficChannelData = processedData?.trafficChannels || [];
  const deviceDistributionData = processedData?.deviceDistribution || [];
```

Make sure it’s clean and doesn’t have any old processing logic.

**4. REMOVE THE OLD getDeviceData FUNCTION if it still exists:**
We’re now extracting device data directly in the chart render, so remove the old function if it’s still there.

**5. CLEAN UP THE HELPER FUNCTION `getCompetitorChartData`:**
This function should be simplified since the unified service already processes the data:

```typescript
  // Helper function to get competitor data for charts
  const getCompetitorChartData = (metricName: string) => {
    if (!competitors || !processedData?.metrics[metricName]) return [];
    
    return competitors.map((competitor: any) => {
      // Check if we have data for this competitor in processedMetrics
      const competitorValue = processedData.metrics[metricName]?.[`Competitor_${competitor.id}`] || 0;
      
      return {
        id: competitor.id,
        label: competitor.domain.replace(/^https?:\/\//, '').replace(/^www\./, ''),
        value: competitorValue,
      };
    });
  };
```

**After cleaning up:**
Tell me what you removed/cleaned up, and we’ll move on to test other time periods.​​​​​​​​​​​​​​​​