Generate TypeScript Types from API Responses

Let's add proper types to replace all the `any` types in the codebase.

**Step 1: Create shared types file**

Create `/client/src/types/api.types.ts`:

```typescript
// Based on your actual database schema from /shared/schema.ts
export interface Client {
  id: string;
  name: string;
  websiteUrl: string;
  businessSize: string;
  industryVertical: string;
  ga4PropertyId?: string;
  iconUrl?: string;
  active: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export interface User {
  id: string;
  name: string;
  email: string;
  role: 'Admin' | 'User';
  clientId?: string;
  status: 'Active' | 'Inactive';
  lastLogin?: Date;
  createdAt: Date;
  updatedAt: Date;
}

export interface BenchmarkCompany {
  id: string;
  name: string;
  websiteUrl: string;
  businessSize: string;
  industryVertical: string;
  sourceVerified: boolean;
  active: boolean;
  createdAt: Date;
}

export interface CDPortfolioCompany {
  id: string;
  name: string;
  websiteUrl: string;
  businessSize: string;
  industryVertical: string;
  description?: string;
  active: boolean;
  createdAt: Date;
}

export interface FilterOption {
  id: string;
  category: 'businessSizes' | 'industryVerticals';
  value: string;
  label: string;
  order: number;
  active: boolean;
}

export interface Metric {
  id: string;
  clientId: string;
  metricName: string;
  value: number | string;
  channel?: string;
  deviceType?: string;
  sourceType: 'Client' | 'Industry_Avg' | 'CD_Avg';
  timePeriod: string;
  createdAt: Date;
}

export interface InsightData {
  id: string;
  clientId: string;
  metricName: string;
  content: string;
  period: string;
  createdAt: Date;
}

export interface GA4ServiceAccount {
  id: string;
  email: string;
  projectId: string;
  isActive: boolean;
  createdAt: Date;
}

export interface MetricPrompt {
  metricName: string;
  description?: string;
  promptTemplate: string;
  isActive: boolean;
  updatedAt: Date;
}
Step 2: Update admin-panel.tsx to use these types
In /client/src/pages/admin-panel.tsx:

Add import at top:

typescriptimport type { 
  Client, 
  User, 
  BenchmarkCompany, 
  CDPortfolioCompany, 
  FilterOption, 
  MetricPrompt 
} from '@/types/api.types';

Replace all any[] types in queries:

Find and replace:

useQuery<any[]> with appropriate type like useQuery<Client[]>, useQuery<User[]>, etc.
useState<any> with appropriate type
(client: any) with (client: Client)
(user: any) with (user: User)
(company: any) with (company: BenchmarkCompany) or (company: CDPortfolioCompany)

Step 3: Update service layer types
In /client/src/services/api/base.service.ts:
Replace generic any with proper generics:
typescriptexport abstract class BaseService {
  protected basePath: string;

  constructor(basePath: string) {
    this.basePath = basePath;
  }

  protected request<T>(method: string, path: string = '', data?: unknown): Promise<T> {
    return apiRequest(method, `${this.basePath}${path}`, data);
  }

  async getAll<T>(): Promise<T[]> {
    return this.request<T[]>('GET');
  }

  async getById<T>(id: string): Promise<T> {
    return this.request<T>('GET', `/${id}`);
  }

  async create<T>(data: Partial<T>): Promise<T> {
    return this.request<T>('POST', '', data);
  }

  async update<T>(id: string, data: Partial<T>): Promise<T> {
    return this.request<T>('PUT', `/${id}`, data);
  }

  async delete(id: string): Promise<void> {
    return this.request<void>('DELETE', `/${id}`);
  }
}
Step 4: Quick find/replace commands to run:
bash# Count how many 'any' types are left
grep -c ": any" /client/src/pages/admin-panel.tsx

# Find specific any types to replace
grep -n "any\[\]" /client/src/pages/admin-panel.tsx | head -10

# Find untyped mutations
grep -n "mutationFn.*any" /client/src/pages/admin-panel.tsx | head -5
This will:

Give us proper IntelliSense and type checking
Catch errors at compile time
Make refactoring safer
No UI changes or functionality changes